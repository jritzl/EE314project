	module project41(clk50MHz,  clk25MHz, logic0,logic1,activity, h_sync_out, v_sync_out, sync_out,  blank_out, red_out, blue_out, green_out, blank_out, number_out,winLed);
	input clk50MHz;
	input  logic0;
	input  logic1;
	input  activity;
	output h_sync_out;
	output v_sync_out;
	output [7:0] red_out;
	output [7:0] blue_out;
	output [7:0] green_out;
	output reg sync_out = 0;
	output reg blank_out;
	output reg clk25MHz;
	output reg [7:0] number_out;
	output reg winLed =0;
	reg [1:0] location_array [0:9][0:9];
	integer i, j;
	integer yu =0;
	integer m;
	integer n;
	reg [3:0] start_m, start_n, end_m, end_n;
	reg [4:0] D2G = 4'b0000;
	reg [4:0] D2B = 4'b0000;
	reg [1:0] D1G = 2'b00;
	reg [1:0] D1B = 2'b00;
	reg [4:0] DWG = 4'b0000;
	reg [4:0] DWB = 4'B0000;
	reg [4:0] harfLPG = 4'b1111;
	reg [4:0] harfLPB = 4'b1111;
	reg [4:0] sayiLPG = 4'b1111;
	reg [4:0] sayiLPB = 4'b1111;
	reg [1:0] mainstate =2'b00;
	reg lastwinter =0;
	reg invalid =0;
	reg win = 0;
	reg [9:0] counter_line_x = 0;
	reg [9:0] counter_line_y = 0;
	reg [9:0] pixel_x = 0;
	reg [9:0] pixel_y = 0;
	reg [7:0] red_code = 0;
	reg [7:0] blue_code = 0;
	reg [7:0] green_code = 0;
	reg [1:0] press_counter;
	reg [10:0] logic_0_counter;
	reg [10:0] logic_1_counter;
	reg [100:0] invalid_counter;
	reg [100:0] winnerscreen;
	reg [10:0] activity_counter;
	parameter [9:0] a = 670;
	parameter [9:0] b = 250;
	parameter [18:0] r_sqr = 25*25;
	reg [18:0] r_sqrmin = 24*24;
	parameter [9:0] uyari_x = 670;
	parameter [9:0] uyari_y = 110;
	reg [9:0] xx1=0;
	reg [9:0] yy1=0;
	reg [9:0] xx2=0;
	reg [9:0] yy2=0;
	reg [9:0] xx3=0;
	reg [9:0] yy3=0;
	reg [9:0] xx4=0;
	reg [9:0] yy4=0;
	reg [9:0] xx5=0;
	reg [9:0] yy5=0;
	reg [9:0] xx6=0;
	reg [9:0] yy6=0;
	reg [9:0] xx7=0;
	reg [9:0] yy7=0;
	reg [9:0] xx8=0;
	reg [9:0] yy8=0;
	reg [9:0] xx9=0;
	reg [9:0] yy9=0;
	reg [9:0] xx10=0;
	reg [9:0] yy10=0;
	reg [9:0] xx11=0;
	reg [9:0] yy11=0;
	reg [9:0] xx12=0;
	reg [9:0] yy12=0;
	reg [9:0] xx13=0;
	reg [9:0] yy13=0;
	reg [9:0] xx14=0;
	reg [9:0] yy14=0;
	reg [9:0] xx15=0;
	reg [9:0] yy15=0;
	reg [9:0] xx16=0;
	reg [9:0] yy16=0;
	reg [9:0] xx17=0;
	reg [9:0] yy17=0;
	reg [9:0] xx18=0;
	reg [9:0] yy18=0;
	reg [9:0] xx19=0;
	reg [9:0] yy19=0;
	reg [9:0] xx20=0;
	reg [9:0] yy20=0;
	reg [9:0] xx21=0;
	reg [9:0] yy21=0;
	reg [9:0] xx22=0;
	reg [9:0] yy22=0;
	reg [9:0] xx23=0;
	reg [9:0] yy23=0;
	reg [9:0] xx24=0;
	reg [9:0] yy24=0;
	reg [9:0] xx25=0;
	reg [9:0] yy25=0;
	reg [9:0] xx26=0;
	reg [9:0] yy26=0;
	reg [9:0] xx27=0;
	reg [9:0] yy27=0;
	reg [3:0] x_cord1;
	reg [3:0] y_cord1;
	reg [3:0] x_cord2;
	reg [3:0] y_cord2;
	reg [3:0] x_cord3;
	reg [3:0] y_cord3;
	reg [3:0] x_cord4;
	reg [3:0] y_cord4;
	reg [3:0] x_cord5;
	reg [3:0] y_cord5;
	reg [3:0] x_cord6;
	reg [3:0] y_cord6;
	reg draw1Red =0;
	reg draw2Red =0;
	reg draw3Red =0;
	reg draw4Red =0;
	reg draw5Red =0;
	reg draw6Red =0;
	reg draw1 = 0;
	reg draw2 = 0;
	reg draw3 = 0;
	reg draw4 = 0;
	reg draw5 = 0;
	reg draw6 = 0;
	reg draw7 = 0;
	reg draw8 = 0;
	reg draw9 = 0;
	reg draw10 = 0;
	reg draw11 = 0;
	reg draw12 = 0;
	reg draw13 = 0;
	reg draw14 = 0;
	reg draw15 = 0;
	reg draw16 = 0;
	reg draw17 = 0;
	reg draw18 = 0;
	reg draw19 = 0;
	reg draw20 = 0;
	reg draw21 = 0;
	reg draw22 = 0;
	reg draw23 = 0;
	reg draw24 = 0;
	reg draw25 = 0;
	reg draw1c = 0;
	reg draw2c = 0;
	reg draw3c = 0;
	reg draw4c = 0;
	reg draw5c = 0;
	reg draw6c = 0;
	reg draw7c = 0;
	reg draw8c = 0;
	reg draw9c = 0;
	reg draw10c = 0;
	reg draw11c = 0;
	reg draw12c = 0;
	reg draw13c = 0;
	reg draw14c = 0;
	reg draw15c = 0;
	reg draw16c = 0;
	reg draw17c = 0;
	reg draw18c = 0;
	reg draw19c = 0;
	reg draw20c = 0;
	reg draw21c = 0;
	reg draw22c = 0;
	reg draw23c = 0;
	reg draw24c = 0;
	reg draw25c = 0;
	parameter [18:0] r_sqr1 = 8*8;
	parameter [18:0] r_sqrmin1 = 7*7;
	reg x_coordinates = 470;
	reg y_coordinates = 150;
	reg tryone = 0;
	reg [4:0] turnnumber;
	reg done=0;
	reg [3:0] x_cord;
	reg [3:0] y_cord;
	parameter st01_turn1 = 'd01;
	parameter st02_turn2 = 'd02;
	parameter st03_turn3 = 'd03;
	parameter st04_turn4 = 'd04;
	parameter st05_turn5 = 'd05;
	parameter st06_turn6 = 'd06;
	parameter st07_turn7 = 'd07;
	parameter st08_turn8 = 'd08;
	parameter st09_turn9 = 'd09;
	parameter st10_turn10 = 'd10;
	parameter st11_turn11 = 'd11;
	parameter st12_turn12 = 'd12;
	parameter st13_turn13 = 'd13;
	parameter st14_turn14 = 'd14;
	parameter st15_turn15 = 'd15;
	parameter st16_turn16 = 'd16;
	parameter st17_turn17 = 'd17;
	parameter st18_turn18 = 'd18;
	parameter st19_turn19 = 'd19;
	parameter st20_turn20 = 'd20;
	parameter st21_turn21 = 'd21;
	parameter st22_turn22 = 'd22;
	parameter st23_turn23 = 'd23;
	parameter st24_turn24 = 'd24;
	parameter st25_turn25 = 'd25;
	parameter st26_triwin = 'd26;
	parameter st27_cirwin = 'd27;
	parameter st28_draw = 'd28;
	parameter st29_turn29 = 'd29;
	parameter [9:0] x1 = 220;
	parameter [9:0] y1 = 240;
	parameter [9:0] h = 40;
	parameter [9:0] x2 = 220;
	parameter [9:0] y2 = 245;
	reg [9:0] h2 = 33;
	parameter [9:0] x3 = 480;
	parameter [9:0] y3 = 160;
	parameter [9:0] h3 = 13;
	parameter [9:0] x4 = 480;
	parameter [9:0] y4 = 163;
	parameter [9:0] h4 = 6;
	initial begin
		clk25MHz <= 0;
		turnnumber <= st01_turn1;
		 number_out = 8'b0000000;
	press_counter = 2'b00;
	 logic_0_counter = 'd0;
	 logic_1_counter = 'd0;
	  invalid_counter <= 'd0;
	 activity_counter = 'd0;
	   for (i = 0; i < 10; i = i + 1) begin
			for (j = 0; j < 10; j = j + 1) begin
				location_array[i][j] <= 2'b00;
			end
		end
		end
	always @(posedge clk50MHz)
	begin
		  clk25MHz <= ~clk25MHz;
	end
	always @(posedge clk25MHz)
	begin
		if (pixel_x < 799)
			pixel_x <= pixel_x + 1;
		else
			pixel_x <= 0;
	end
	always @ (posedge clk25MHz)
		begin
			if (pixel_x == 799)
				begin
					if (pixel_y < 525)
						pixel_y <= pixel_y + 1;
					else
						pixel_y <= 0;
				end
		end
	assign h_sync_out = (pixel_x >= 0 && pixel_x < 96) ? 1:0;
	assign v_sync_out = (pixel_y >= 0 && pixel_y < 2) ? 1:0;
	always @ (posedge clk25MHz)
	begin
	if(pixel_y >= 30 & pixel_y < 515)
		begin
			if (pixel_x >= 144 & pixel_x < 784)
				blank_out = 1;
		end
	if (pixel_y < 30)
		begin
			red_code 	<= 255;
			blue_code 	<= 255;
			green_code 	<= 255;
		end
	else if (pixel_y == 60 || pixel_y == 90  || pixel_y == 120  || pixel_y == 150 || pixel_y == 180 || pixel_y == 210 || pixel_y == 240 || pixel_y == 270 || pixel_y == 300 || pixel_y == 330 || pixel_y == 360)
		begin
			if (pixel_x < 314)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 314 && pixel_x < 614)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 0;
				end
			else if (pixel_x >= 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
		else if ((pixel_y >= 60 && pixel_y < 360))
		begin
			if (pixel_x < 314)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 314 || pixel_x == 344 || pixel_x == 374 || pixel_x == 404 || pixel_x == 434 || pixel_x == 464 || pixel_x == 494 || pixel_x == 524 || pixel_x == 554 || pixel_x == 584 || pixel_x == 614)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 0;
				end
			else if (pixel_x > 314 )
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
		if (pixel_y > 38 && pixel_y <48 )
		begin
			if (pixel_x < 314)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 314 || pixel_x == 334 || pixel_x == 344 || pixel_x == 364 || pixel_x == 374 || pixel_x == 404 || pixel_x == 424 || pixel_x == 434 || pixel_x == 464 || pixel_x == 494 || pixel_x == 524 || pixel_x == 544 || pixel_x == 569 || pixel_x == 599)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 0;
				end
			else if (pixel_x > 314 )
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
		if (pixel_y >= 48 && pixel_y <58 )
		begin
			if (pixel_x < 314)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 514 || pixel_x == 314 || pixel_x == 334 || pixel_x == 344 || pixel_x == 364 || pixel_x == 374 || pixel_x == 404 || pixel_x == 424 || pixel_x == 434 || pixel_x == 464 || pixel_x == 494 || pixel_x == 524 || pixel_x == 544 || pixel_x == 569 || pixel_x == 599)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 0;
				end
			else if (pixel_x > 314 )
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
		 if (pixel_y == 38 )
		begin
			if (pixel_x < 314)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 314 && pixel_x <= 334 || pixel_x >= 344 && pixel_x <= 362 || pixel_x >= 374 && pixel_x <= 394 || pixel_x >= 404 && pixel_x <= 424 || pixel_x >= 434 && pixel_x <= 454 || pixel_x >= 464 && pixel_x <= 484 || pixel_x >= 494 && pixel_x <= 514 || pixel_x >= 566 && pixel_x <= 572 || pixel_x >= 596 && pixel_x <= 602)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 0;
				end
			else
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
		if (pixel_y == 49 )
		begin
			if (pixel_x < 314)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 314 && pixel_x <= 334 || pixel_x >= 344 && pixel_x <= 362   || pixel_x >= 434 && pixel_x <= 450 || pixel_x >= 464 && pixel_x <= 480 || pixel_x >= 504 && pixel_x <= 514 || pixel_x >= 524 && pixel_x <= 544)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 0;
				end
			else
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
		if (pixel_y == 58 )
		begin
			if (pixel_x < 314)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 344 && pixel_x <= 362 || pixel_x >= 374 && pixel_x <= 394 || pixel_x >= 404 && pixel_x <= 424 || pixel_x >= 434 && pixel_x <= 454  || pixel_x >= 494 && pixel_x <= 514 || pixel_x >= 566 && pixel_x <= 572 || pixel_x >= 590 && pixel_x <= 599)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 0;
				end
			else
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
		if (pixel_y >= 60 && pixel_y <80 ||pixel_y >= 90 && pixel_y <110 || pixel_y >= 120 && pixel_y <130 || pixel_y >= 150 && pixel_y <170 || pixel_y >= 180 && pixel_y <200 || pixel_y >= 220 && pixel_y <230|| pixel_y >= 250 && pixel_y <260|| pixel_y >= 270 && pixel_y <290|| pixel_y >= 300 && pixel_y <320|| pixel_y >= 330 && pixel_y <350 )
		begin
			if (pixel_x < 144)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 300)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 0;
				end
			else if (pixel_x == 301 )
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
			if (pixel_y >= 60 && pixel_y <80 ||pixel_y >= 130 && pixel_y <140 || pixel_y >= 180 && pixel_y <190 || pixel_y >= 210 && pixel_y <220 || pixel_y >= 240 && pixel_y <260|| pixel_y >= 300 && pixel_y <320|| pixel_y >= 330 && pixel_y <340)
		begin
			if (pixel_x < 144)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 280)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 0;
				end
			else if (pixel_x == 281 )
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
			if (pixel_y == 60 || pixel_y == 80 || pixel_y == 120 ||pixel_y == 130 ||pixel_y == 140 ||pixel_y == 150 ||pixel_y == 160 ||pixel_y == 170 ||pixel_y == 190 ||pixel_y == 210 ||pixel_y == 220 ||pixel_y == 230 ||pixel_y == 240 ||pixel_y == 250 || pixel_y == 260 ||pixel_y == 270 || pixel_y == 310 ||pixel_y == 340 ||pixel_y == 300 || pixel_y == 320 || pixel_y == 330 ||pixel_y == 350)
		begin
			if (pixel_x < 144)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 280 && pixel_x <= 300)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 0;
				end
			else if (pixel_x == 301)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
		if (pixel_y == 400)
			begin
			if (pixel_x < 144)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 280 && pixel_x <= 300 || pixel_x >= 310 && pixel_x <= 330 || pixel_x >= 580 && pixel_x <= 600 )
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 301 || pixel_x == 331 || pixel_x == 601)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
		if (pixel_y == 420)
		begin
			if (pixel_x < 144)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 440 && pixel_x <= 460 || pixel_x >= 550 && pixel_x <= 570)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 461 || pixel_x == 571 )
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
		if (pixel_y == 430)
			begin
			if (pixel_x < 144)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 280 && pixel_x <= 300 || pixel_x >= 310 && pixel_x <= 330 || pixel_x >= 580 && pixel_x <= 600 )
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 301 || pixel_x == 331 || pixel_x == 601)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
		if (pixel_y == 450)
		begin
			if (pixel_x < 144)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 440 && pixel_x <= 460 || pixel_x >= 550 && pixel_x <= 570)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 461 || pixel_x == 571)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
		if (pixel_y >= 400 && pixel_y <420)
		begin
			if (pixel_x < 144)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 290 || pixel_x == 310 || pixel_x == 320 || pixel_x == 330 || pixel_x == 440 || pixel_x == 450 || pixel_x == 460 || pixel_x == 550 || pixel_x == 580)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 291 || pixel_x == 311 || pixel_x == 321 || pixel_x == 331 || pixel_x == 441 || pixel_x == 451 || pixel_x == 461 || pixel_x == 551 || pixel_x == 581 )
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				if (pixel_y >= 430 && pixel_y <450)
		begin
			if (pixel_x < 144)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 290 || pixel_x == 310 || pixel_x == 320 || pixel_x == 330 || pixel_x == 440 || pixel_x == 450 || pixel_x == 460 || pixel_x == 550 || pixel_x == 580)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 291 || pixel_x == 311 || pixel_x == 321 || pixel_x == 331 || pixel_x == 441 || pixel_x == 451 || pixel_x == 461 || pixel_x == 551 || pixel_x == 581 )
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				if (pixel_y >= 400 && pixel_y <410)
		begin
			if (pixel_x < 144)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 600)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 601 )
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				if (pixel_y >= 430 && pixel_y <440)
		begin
			if (pixel_x < 144)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 600)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 601 || pixel_x == 602 )
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				if (pixel_y == 410)
		begin
			if (pixel_x < 144)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 580 && pixel_x <= 600)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 601)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
					if (pixel_y == 440)
		begin
			if (pixel_x < 144)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 580 && pixel_x <= 600)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 601 || pixel_x == 602)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				///////////////////////////////////////////
			if (((pixel_x - a) * (pixel_x - a) + (pixel_y - b) * (pixel_y - b)) <= r_sqr   &&  ((pixel_x - a) * (pixel_x - a) + (pixel_y - b) * (pixel_y - b)) >= r_sqrmin) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - a) * (pixel_x - a) + (pixel_y - b) * (pixel_y - b)) == r_sqr+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
				if ((pixel_y >= y1 && pixel_y < y1 + h) &&
			(pixel_x > x1 - (pixel_y - y1)) &&
			(pixel_x < x1 + (pixel_y - y1))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == x1 + (pixel_y - y1) &&  pixel_y == y1 + h )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		if ((pixel_y >= y2 && pixel_y < y2 + h2) &&
			(pixel_x > x2 - (pixel_y - y2)) &&
			(pixel_x < x2 + (pixel_y - y2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		//////////////////////////////////
		case(mainstate)
		2'b00: begin
		winLed <=0;
		done<=0;
	 D2G <= 4'b0000;
	 D2B <= 4'b0000;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
				draw1Red <=0;
				draw2Red <=0;
				draw3Red <=0;
				draw4Red <=0;
				draw5Red <=0;
				draw6Red <=0;
				 draw1 <= 0;
	 draw2 <= 0;
	 draw3 <= 0;
	 draw4 <= 0;
	 draw5 <= 0;
	 draw6 <= 0;
	 draw7 <= 0;
	 draw8 <= 0;
	 draw9 <= 0;
	 draw10<= 0;
	 draw11 <= 0;
	 draw12 <= 0;
	 draw13 <= 0;
	 draw14 <= 0;
	 draw15 <= 0;
	 draw16 <= 0;
	 draw17 <= 0;
	 draw18 <= 0;
	 draw19 <= 0;
	 draw20 <= 0;
	 draw21 <= 0;
	 draw22 <= 0;
	 draw23 <= 0;
	 draw24 <= 0;
	 draw25 <= 0;
	 draw1c <= 0;
	 draw2c <= 0;
	 draw3c <= 0;
	 draw4c <= 0;
	 draw5c <= 0;
	 draw6c <= 0;
	 draw7c <= 0;
	 draw8c <= 0;
	 draw9c <= 0;
	 draw10c <= 0;
	 draw11c <= 0;
	 draw12c <= 0;
	 draw13c <= 0;
	 draw14c <= 0;
	 draw15c <= 0;
	 draw16c <= 0;
	 draw17c <= 0;
	 draw18c <= 0;
	 draw19c <= 0;
	 draw20c <= 0;
	 draw21c <= 0;
	 draw22c <= 0;
	 draw23c <= 0;
	 draw24c <= 0;
	 draw25c <= 0;
		turnnumber <= st01_turn1;
		number_out = 8'b0000000;
		press_counter = 2'b00;
		logic_0_counter = 'd0;
		logic_1_counter = 'd0;
		invalid_counter <= 'd0;
		activity_counter = 'd0;
	   for (i = 0; i < 10; i = i + 1) begin
			for (j = 0; j < 10; j = j + 1) begin
				location_array[i][j] <= 2'b00;
			end
		end
		if(lastwinter==1) begin
		mainstate<= 2'b10;
		end
		else begin
		mainstate<= 2'b01;
		end
		end
		2'b01: begin
		case (turnnumber)
	st01_turn1 : begin
	winLed <=0;
	r_sqrmin=24*24;
	h2=0;
	if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60 && press_counter == 0) begin
				x_cord1 = number_out[3:0];
				y_cord1 = number_out[7:4];
					 press_counter <= press_counter + 1;
					 if(x_cord1 > 4'b1001 || y_cord1 > 4'b1001 ) begin
						invalid <=1;
					 end
					 else begin
						xx1=(x_cord1)*30+314+15;
						yy1=(y_cord1)*30+35+15+25;
						location_array[x_cord1][y_cord1] <= 2'b01;
						done <= 1;
						invalid<=0;
						draw1 <=1;
	 D2G <= 4'b0001;
	 D2B <= 4'b0000;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
	 harfLPG <= x_cord1;
	 sayiLPG <= y_cord1;
						end
					 end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	 if(invalid == 1) begin
			 if (((pixel_x - uyari_x) * (pixel_x - uyari_x) + (pixel_y - uyari_y) * (pixel_y - uyari_y)) <= 625   &&  ((pixel_x - uyari_x) * (pixel_x - uyari_x) + (pixel_y - uyari_y) * (pixel_y - uyari_y)) >= 1) begin
			red_code <= 255;
			blue_code <= 0;
			green_code <= 0;
		end
		else if (((pixel_x - uyari_x) * (pixel_x - uyari_x) + (pixel_y - uyari_y) * (pixel_y - uyari_y)) == 627) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		if(invalid_counter == 25000000) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						press_counter <= 'd0;
						invalid <=0;
						invalid_counter <=0;
						turnnumber = st01_turn1;
						end
						else begin
						invalid_counter <= invalid_counter +1;
						end
	 end
		if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			turnnumber = st02_turn2;
					end
				   end
	st02_turn2 :  begin
	h2=33;
	r_sqrmin=0;
		if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord2 = number_out[3:0];
				y_cord2 = number_out[7:4];
					  xx2=(x_cord2)*30+314+15;
						yy2=(y_cord2)*30+35+15+25;
						if (location_array[x_cord2][y_cord2] == 2'b00 && ~(x_cord2 > 4'b1001 || y_cord2 > 4'b1001))begin
						done <= 1;
						draw2 <=1;
						invalid <=0;
	 D2G <= 4'b0001;
	 D2B <= 4'b0001;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
	 harfLPB <= x_cord2;
	 sayiLPB <= y_cord2;
						end
						else if ((location_array[x_cord2][y_cord2] != 2'b00) || (x_cord2 > 4'b1001 || y_cord2 > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
			if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord2][y_cord2] <= 2'b10;
		turnnumber = st03_turn3;
					end
						end
					/////
					st03_turn3 :  begin
	r_sqrmin=24*24;
	h2=0;
		if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord3 = number_out[3:0];
				y_cord3 = number_out[7:4];
					  xx3=(x_cord3)*30+314+15;
						yy3=(y_cord3)*30+35+15+25;
						if (location_array[x_cord3][y_cord3] == 2'b00 && ~(x_cord3 > 4'b1001 || y_cord3 > 4'b1001))begin
						done <= 1;
	 D2G <= 4'b0010;
	 D2B <= 4'b0001;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
	 harfLPG <= x_cord3;
	 sayiLPG <= y_cord3;
						draw3 <=1;
						invalid <=0;
						end
						else if ((location_array[x_cord3][y_cord3] != 2'b00) || (x_cord3 > 4'b1001 || y_cord3 > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord3][y_cord3] <= 2'b01;
		turnnumber = st04_turn4;
					end
						end
	/////
	st04_turn4 :  begin
	r_sqrmin=0;
	h2=33;
		if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord4 = number_out[3:0];
				y_cord4 = number_out[7:4];
					  xx4=(x_cord4)*30+314+15;
						yy4=(y_cord4)*30+35+15+25;
						if (location_array[x_cord4][y_cord4] == 2'b00 && ~(x_cord4 > 4'b1001 || y_cord4 > 4'b1001))begin
						done <= 1;
						draw4 <= 1;
						invalid <=0;
	 D2G <= 4'b0010;
	 D2B <= 4'b0010;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
	 harfLPB <= x_cord4;
	 sayiLPB <= y_cord4;
						end
						else if ((location_array[x_cord4][y_cord4] != 2'b00) || (x_cord4 > 4'b1001 || y_cord4 > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
		if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord4][y_cord4] <= 2'b10;
		turnnumber = st05_turn5;
					end
	end
	///////
	st05_turn5 :  begin
	r_sqrmin=24*24;
	h2=0;
		if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord5 = number_out[3:0];
				y_cord5 = number_out[7:4];
					  xx5=(x_cord5)*30+314+15;
						yy5=(y_cord5)*30+35+15+25;
						if (location_array[x_cord5][y_cord5] == 2'b00 && ~(x_cord5 > 4'b1001 || y_cord5 > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw5 <=1;
	 D2G <= 4'b0011;
	 D2B <= 4'b0010;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
	 harfLPG <= x_cord5;
	 sayiLPG <= y_cord5;
						end
						else if ((location_array[x_cord5][y_cord5] != 2'b00) || (x_cord5 > 4'b1001 || y_cord5 > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
		if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord5][y_cord5] <= 2'b01;
		turnnumber = st06_turn6;
					end
	end
	////////////////////
	st06_turn6 :  begin
	r_sqrmin=0;
	h2=33;
		if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord6 = number_out[3:0];
				y_cord6 = number_out[7:4];
					  xx6=(x_cord6)*30+314+15;
						yy6=(y_cord6)*30+35+15+25;
						if (location_array[x_cord6][y_cord6] == 2'b00 && ~(x_cord6 > 4'b1001 || y_cord6 > 4'b1001))begin
						done <= 1;
	 D2G <= 4'b0011;
	 D2B <= 4'b0011;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
	 harfLPB <= x_cord6;
	 sayiLPB <= y_cord6;
						invalid <=0;
						draw6 <=1;
						end
						else if ((location_array[x_cord6][y_cord6] != 2'b00) || (x_cord6 > 4'b1001 || y_cord6 > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord6][y_cord6] <= 2'b10;
		turnnumber = st07_turn7;
					end
	end
	/////////////////
	st07_turn7 :  begin
	r_sqrmin=24*24;
	h2=0;
		if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx7=(x_cord)*30+314+15;
						yy7=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw7 <=1;
	 D2G <= 4'b0100;
	 D2B <= 4'b0011;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
	 harfLPG <= x_cord;
	 sayiLPG <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b01;
			turnnumber = st08_turn8;
	end
	 end
			st08_turn8 : begin
	r_sqrmin=0;
	h2=33;
			if(winLed == 1) begin
			turnnumber = st26_triwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx8=(x_cord)*30+314+15;
						yy8=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
	 D2G <= 4'b0100;
	 D2B <= 4'b0100;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPB <= x_cord;
	 sayiLPB <= y_cord;
						invalid <=0;
						draw8 <= 1;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b10;
			turnnumber = st09_turn9;
	end
	end
	st09_turn9 : begin
	r_sqrmin=24*24;
	h2=0;
			if(winLed == 1) begin
			turnnumber = st27_cirwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx9=(x_cord)*30+314+15;
						yy9=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw9 <=1;
	 D2G <= 4'b0101;
	 D2B <= 4'b0100;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPG <= x_cord;
	 sayiLPG <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b01;
			turnnumber = st10_turn10;
	end
	end
	st10_turn10 : begin
	r_sqrmin=0;
	h2=33;
			if(winLed == 1) begin
			turnnumber = st26_triwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx10=(x_cord)*30+314+15;
						yy10=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw10 <=1;
	 D2G <= 4'b0101;
	 D2B <= 4'b0101;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPB <= x_cord;
	 sayiLPB <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b10;
			turnnumber = st11_turn11;
	end
	end
	st11_turn11 : begin
	r_sqrmin=24*24;
	h2=0;
	location_array[x_cord1][y_cord1] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st27_cirwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx11=(x_cord)*30+314+15;
						yy11=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
	 D2G <= 4'b0110;
	 D2B <= 4'b0101;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPG <= x_cord;
	 sayiLPG <= y_cord;
						invalid <=0;
						draw11 <= 1;
						draw1 <= 0;
						draw1Red <= 1;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b01;
			turnnumber = st12_turn12;
	end
	end
	st12_turn12 : begin
	r_sqrmin=0;
	h2=33;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st26_triwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx12=(x_cord)*30+314+15;
						yy12=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
							draw12 <= 1;
						draw2 <= 0;
						draw2Red <= 1;
	 D2G <= 4'b0110;
	 D2B <= 4'b0110;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPB <= x_cord;
	 sayiLPB <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b10;
			turnnumber = st13_turn13;
	end
	end
	st13_turn13 : begin
	r_sqrmin=24*24;
	h2=0;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st27_cirwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx13=(x_cord)*30+314+15;
						yy13=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						draw13 <=1;
						invalid <=0;
	 D2G <= 4'b0111;
	 D2B <= 4'b0110;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPG <= x_cord;
	 sayiLPG <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
			if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b01;
			turnnumber = st14_turn14;
	end
	end
	st14_turn14 : begin
	r_sqrmin=0;
	h2=33;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st26_triwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx14=(x_cord)*30+314+15;
						yy14=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw14 <=1;
	 D2G <= 4'b0111;
	 D2B <= 4'b0111;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPB <= x_cord;
	 sayiLPB <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b10;
			turnnumber = st15_turn15;
	end
	end
	st15_turn15 : begin
	r_sqrmin=24*24;
	h2=0;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st27_cirwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx15=(x_cord)*30+314+15;
						yy15=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
	 D2G <= 4'b1000;
	 D2B <= 4'b0111;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPG <= x_cord;
	 sayiLPG <= y_cord;
						invalid <=0;
						draw15 <=1;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b01;
			turnnumber = st16_turn16;
	end
	end
	st16_turn16 : begin
	r_sqrmin=0;
	h2=33;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st26_triwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx16=(x_cord)*30+314+15;
						yy16=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw16 <=1;
	 D2G <= 4'b1000;
	 D2B <= 4'b1000;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPB <= x_cord;
	 sayiLPB <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
			if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b10;
			turnnumber = st17_turn17;
	end
	end
	st17_turn17 : begin
	r_sqrmin=24*24;
	h2=0;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st27_cirwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx17=(x_cord)*30+314+15;
						yy17=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
	 D2G <= 4'b1001;
	 D2B <= 4'b1000;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPG <= x_cord;
	 sayiLPG <= y_cord;
						invalid <=0;
						draw17 <=1;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
			if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b01;
			turnnumber = st18_turn18;
	end
	end
	st18_turn18 : begin
	r_sqrmin=0;
	h2=33;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st26_triwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx18=(x_cord)*30+314+15;
						yy18=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw18 <=1;
	 D2G <= 4'b1001;
	 D2B <= 4'b1001;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPB <= x_cord;
	 sayiLPB <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
			if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b10;
			turnnumber = st19_turn19;
	end
	end
	st19_turn19 : begin
	r_sqrmin=24*24;
	h2=0;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st27_cirwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx19=(x_cord)*30+314+15;
						yy19=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						D2G <= 4'b0000;
						invalid <=0;
						draw19 <=1;
	 D2G <= 4'b0000;
	 D2B <= 4'b1001;
	 D1G <= 2'b01;
	 D1B <= 2'b00;
		 harfLPG <= x_cord;
	 sayiLPG <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b01;
			turnnumber = st20_turn20;
	end
	end
	st20_turn20 : begin
	r_sqrmin=0;
	h2=33;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st26_triwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx20=(x_cord)*30+314+15;
						yy20=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw20 <=1;
	 D2G <= 4'b0000;
	 D2B <= 4'b0000;
	 D1G <= 2'b01;
	 D1B <= 2'b01;
		 harfLPB <= x_cord;
	 sayiLPB <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
			if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b10;
			turnnumber = st21_turn21;
	end
	end
	st21_turn21 : begin
	r_sqrmin=24*24;
	h2=0;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st27_cirwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx21=(x_cord)*30+314+15;
						yy21=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw21 <=1;
	 D2G <= 4'b0001;
	 D2B <= 4'b0000;
	 D1G <= 2'b01;
	 D1B <= 2'b01;
		 harfLPG <= x_cord;
	 sayiLPG <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b01;
			turnnumber = st22_turn22;
	end
	end
	st22_turn22 : begin
	r_sqrmin=0;
	h2=33;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st26_triwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx22=(x_cord)*30+314+15;
						yy22=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw22 <=1;
	 D2G <= 4'b0001;
	 D2B <= 4'b0001;
	 D1G <= 2'b01;
	 D1B <= 2'b01;
		 harfLPB <= x_cord;
	 sayiLPB <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b10;
			turnnumber = st23_turn23;
	end
	end
	st23_turn23 : begin
	r_sqrmin=24*24;
	h2=0;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
	location_array[x_cord3][y_cord3] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st27_cirwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx23=(x_cord)*30+314+15;
						yy23=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
	 D2G <= 4'b0010;
	 D2B <= 4'b0001;
	 D1G <= 2'b01;
	 D1B <= 2'b01;
		 harfLPG <= x_cord;
	 sayiLPG <= y_cord;
						invalid <=0;
						draw23 <=1;
						draw3Red <=1;
						draw3 <=0;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b01;
			turnnumber = st24_turn24;
	end
	end
	st24_turn24 : begin
	r_sqrmin=0;
	h2=33;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
	location_array[x_cord3][y_cord3] <= 2'b11;
	location_array[x_cord4][y_cord4] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st26_triwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx24=(x_cord)*30+314+15;
						yy24=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw24 <=1;
						draw4Red <=1;
						draw4 <=0;
	 D2G <= 4'b0010;
	 D2B <= 4'b0010;
	 D1G <= 2'b01;
	 D1B <= 2'b01;
		 harfLPB <= x_cord;
	 sayiLPB <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
			if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b10;
			turnnumber = st25_turn25;
	end
	end
	st25_turn25 : begin
	r_sqrmin=24*24;
	h2=0;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
	location_array[x_cord3][y_cord3] <= 2'b11;
	location_array[x_cord4][y_cord4] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st27_cirwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx25=(x_cord)*30+314+15;
						yy25=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
	 D2G <= 4'b0011;
	 D2B <= 4'b0010;
	 D1G <= 2'b01;
	 D1B <= 2'b01;
		 harfLPG <= x_cord;
	 sayiLPG <= y_cord;
						invalid <=0;
						draw25 <=1;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
			if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b01;
			turnnumber = st29_turn29;
	end
	end
	st26_triwin :  begin
	if(winnerscreen == 250000000) begin
						lastwinter <= 0;
						winLed<=0;
						DWG <= DWG + 1;
	 D2G <= 4'b0000;
	 D2B <= 4'b0000;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
						winnerscreen <=0;
						for (i = 0; i < 10; i = i + 1) begin
			for (j = 0; j < 10; j = j + 1) begin
				location_array[i][j] <= 2'b00;
			end
		end
		  mainstate <= 2'b00;
						end
				else begin
				if ((pixel_y >= y1 && pixel_y < y1 + h) &&
			(pixel_x > x1 - (pixel_y - y1)) &&
			(pixel_x < x1 + (pixel_y - y1))            ) begin
			red_code <= 255;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == x1 + (pixel_y - y1) &&  pixel_y == y1 + h )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		if ((pixel_y >= y2 && pixel_y < y2 + 1) &&
			(pixel_x > x2 - (pixel_y - y2)) &&
			(pixel_x < x2 + (pixel_y - y2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
			winLed <=1;
		  winnerscreen <= winnerscreen +1;
			end
	end
	st27_cirwin :  begin
			if(winnerscreen == 250000000) begin
						lastwinter <= 1;
						winLed<=0;
						DWB <= DWB + 1;
	 D2G <= 4'b0000;
	 D2B <= 4'b0000;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
						winnerscreen <=0;
							for (i = 0; i < 10; i = i + 1) begin
			for (j = 0; j < 10; j = j + 1) begin
				location_array[i][j] <= 2'b00;
			end
		end
		  mainstate <= 2'b00;
						end
						else begin
			if (((pixel_x - a) * (pixel_x - a) + (pixel_y - b) * (pixel_y - b)) <= r_sqr   &&  ((pixel_x - a) * (pixel_x - a) + (pixel_y - b) * (pixel_y - b)) >= 1) begin
			red_code <= 255;
			blue_code <= 0;
			green_code <= 255;
		end
		else if (((pixel_x - a) * (pixel_x - a) + (pixel_y - b) * (pixel_y - b)) == r_sqr+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
						winnerscreen <= winnerscreen +1;
			end
	end
	st28_draw :  begin
	if(winnerscreen == 250000000) begin
						lastwinter <= 0;
	 D2G <= 4'b0000;
	 D2B <= 4'b0000;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
						winLed<=0;
							for (i = 0; i < 10; i = i + 1) begin
			for (j = 0; j < 10; j = j + 1) begin
				location_array[i][j] <= 2'b00;
			end
		end
		   winnerscreen <= 0;
		  mainstate <= 2'b00;
						end
						else begin
	if (((pixel_x - a) * (pixel_x - a) + (pixel_y - b) * (pixel_y - b)) <= r_sqr   &&  ((pixel_x - a) * (pixel_x - a) + (pixel_y - b) * (pixel_y - b)) >= 1) begin
			red_code <= 255;
			blue_code <= 0;
			green_code <= 255;
		end
		else if (((pixel_x - a) * (pixel_x - a) + (pixel_y - b) * (pixel_y - b)) == r_sqr+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
				if ((pixel_y >= y1 && pixel_y < y1 + h) &&
			(pixel_x > x1 - (pixel_y - y1)) &&
			(pixel_x < x1 + (pixel_y - y1))            ) begin
			red_code <= 255;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == x1 + (pixel_y - y1) &&  pixel_y == y1 + h )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		if ((pixel_y >= y2 && pixel_y < y2 + 1) &&
			(pixel_x > x2 - (pixel_y - y2)) &&
			(pixel_x < x2 + (pixel_y - y2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
						winnerscreen <= winnerscreen +1;
						end
	end
	st29_turn29 : begin
	r_sqrmin=0;
	h2=33;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
	location_array[x_cord3][y_cord3] <= 2'b11;
	location_array[x_cord4][y_cord4] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st26_triwin;
			end
			else begin
			turnnumber = st28_draw;
			end
	end
	endcase
	end
	2'b10: begin
	case (turnnumber)
	st01_turn1 : begin
	winLed <=0;
	r_sqrmin=0;
	h2=33;
	if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60 && press_counter == 0) begin
				x_cord1 = number_out[3:0];
				y_cord1 = number_out[7:4];
					 press_counter <= press_counter + 1;
					 if(x_cord1 > 4'b1001 || y_cord1 > 4'b1001 ) begin
						invalid <=1;
					 end
					 else begin
						xx1=(x_cord1)*30+314+15;
						yy1=(y_cord1)*30+35+15+25;
						location_array[x_cord1][y_cord1] <= 2'b10;
						done <= 1;
						invalid<=0;
						draw1c <=1;
	 D2G <= 4'b0000;
	 D2B <= 4'b0001;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPB <= x_cord1;
	 sayiLPB <= y_cord1;
						end
					 end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
		if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			turnnumber = st02_turn2;
					end
				   end
	st02_turn2 :  begin
	h2=0;
	r_sqrmin=24*24;
		if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord2 = number_out[3:0];
				y_cord2 = number_out[7:4];
					  xx2=(x_cord2)*30+314+15;
						yy2=(y_cord2)*30+35+15+25;
						if (location_array[x_cord2][y_cord2] == 2'b00 && ~(x_cord2 > 4'b1001 || y_cord2 > 4'b1001))begin
						done <= 1;
						draw2c <=1;
						invalid <=0;
	 D2G <= 4'b0001;
	 D2B <= 4'b0001;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
			 harfLPG <= x_cord2;
	 sayiLPG <= y_cord2;
						end
						else if ((location_array[x_cord2][y_cord2] != 2'b00) || (x_cord2 > 4'b1001 || y_cord2 > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
			if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord2][y_cord2] <= 2'b01;
		turnnumber = st03_turn3;
					end
						end
					/////
					st03_turn3 :  begin
	r_sqrmin=0;
	h2=33;
		if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord3 = number_out[3:0];
				y_cord3 = number_out[7:4];
					  xx3=(x_cord3)*30+314+15;
						yy3=(y_cord3)*30+35+15+25;
						if (location_array[x_cord3][y_cord3] == 2'b00 && ~(x_cord3 > 4'b1001 || y_cord3 > 4'b1001))begin
						done <= 1;
						draw3c <=1;
						invalid <=0;
	 D2G <= 4'b0001;
	 D2B <= 4'b0010;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
			 harfLPB <= x_cord3;
	 sayiLPB <= y_cord3;
						end
						else if ((location_array[x_cord3][y_cord3] != 2'b00) || (x_cord3 > 4'b1001 || y_cord3 > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord3][y_cord3] <= 2'b10;
		turnnumber = st04_turn4;
					end
						end
	/////
	st04_turn4 :  begin
	r_sqrmin=24*24;
	h2=0;
		if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord4 = number_out[3:0];
				y_cord4 = number_out[7:4];
					  xx4=(x_cord4)*30+314+15;
						yy4=(y_cord4)*30+35+15+25;
						if (location_array[x_cord4][y_cord4] == 2'b00 && ~(x_cord4 > 4'b1001 || y_cord4 > 4'b1001))begin
						done <= 1;
						draw4c <= 1;
						invalid <=0;
	 D2G <= 4'b0010;
	 D2B <= 4'b0010;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
			 harfLPG <= x_cord4;
	 sayiLPG <= y_cord4;
						end
						else if ((location_array[x_cord4][y_cord4] != 2'b00) || (x_cord4 > 4'b1001 || y_cord4 > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
		if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord4][y_cord4] <= 2'b01;
		turnnumber = st05_turn5;
					end
	end
	///////
	st05_turn5 :  begin
	r_sqrmin=0;
	h2=33;
		if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord5 = number_out[3:0];
				y_cord5 = number_out[7:4];
					  xx5=(x_cord5)*30+314+15;
						yy5=(y_cord5)*30+35+15+25;
						if (location_array[x_cord5][y_cord5] == 2'b00 && ~(x_cord5 > 4'b1001 || y_cord5 > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw5c <=1;
	 D2G <= 4'b0010;
	 D2B <= 4'b0011;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
			 harfLPB <= x_cord5;
	 sayiLPB <= y_cord5;
						end
						else if ((location_array[x_cord5][y_cord5] != 2'b00) || (x_cord5 > 4'b1001 || y_cord5 > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
		if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord5][y_cord5] <= 2'b10;
		turnnumber = st06_turn6;
					end
	end
	//////////////////
	st06_turn6 :  begin
	r_sqrmin=24*24;
	h2=0;
		if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord6 = number_out[3:0];
				y_cord6 = number_out[7:4];
					  xx6=(x_cord6)*30+314+15;
						yy6=(y_cord6)*30+35+15+25;
						if (location_array[x_cord6][y_cord6] == 2'b00 && ~(x_cord6 > 4'b1001 || y_cord6 > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw6c <=1;
	 D2G <= 4'b0011;
	 D2B <= 4'b0011;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
			 harfLPG <= x_cord6;
	 sayiLPG <= y_cord6;
						end
						else if ((location_array[x_cord6][y_cord6] != 2'b00) || (x_cord6 > 4'b1001 || y_cord6 > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord6][y_cord6] <= 2'b01;
		turnnumber = st07_turn7;
					end
	end
	st07_turn7 :  begin
	r_sqrmin=0;
	h2=33;
		if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx7=(x_cord)*30+314+15;
						yy7=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw7c <=1;
	 D2G <= 4'b0011;
	 D2B <= 4'b0100;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
			 harfLPB <= x_cord;
	 sayiLPB <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b10;
			turnnumber = st08_turn8;
	end
	 end
			st08_turn8 : begin
	r_sqrmin=0;
	h2=33;
			if(winLed == 1) begin
			turnnumber = st27_cirwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx8=(x_cord)*30+314+15;
						yy8=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw8c <= 1;
	 D2G <= 4'b0100;
	 D2B <= 4'b0100;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPG <= x_cord;
	 sayiLPG <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b01;
			turnnumber = st09_turn9;
	end
	end
	st09_turn9 : begin
	r_sqrmin=0;
	h2=33;
			if(winLed == 1) begin
			turnnumber = st26_triwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx9=(x_cord)*30+314+15;
						yy9=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw9c <=1;
	 D2G <= 4'b0100;
	 D2B <= 4'b0101;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPB <= x_cord;
	 sayiLPB <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b10;
			turnnumber = st10_turn10;
	end
	end
	st10_turn10 : begin
	r_sqrmin=24*24;
	h2=0;
			if(winLed == 1) begin
			turnnumber = st27_cirwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx10=(x_cord)*30+314+15;
						yy10=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw10c <=1;
	 D2G <= 4'b0101;
	 D2B <= 4'b0101;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPG <= x_cord;
	 sayiLPG <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b01;
			turnnumber = st11_turn11;
	end
	end
	st11_turn11 : begin
	r_sqrmin=0;
	h2=33;
	location_array[x_cord1][y_cord1] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st26_triwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx11=(x_cord)*30+314+15;
						yy11=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw11c <= 1;
						draw1c <= 0;
						draw1Red <= 1;
	 D2G <= 4'b0101;
	 D2B <= 4'b0110;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPB <= x_cord;
	 sayiLPB <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b10;
			turnnumber = st12_turn12;
	end
	end
	st12_turn12 : begin
	r_sqrmin=24*24;
	h2=0;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st27_cirwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx12=(x_cord)*30+314+15;
						yy12=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
							draw12c <= 1;
						draw2c <= 0;
						draw2Red <= 1;
	 D2G <= 4'b0110;
	 D2B <= 4'b0110;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPG <= x_cord;
	 sayiLPG <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b01;
			turnnumber = st13_turn13;
	end
	end
	st13_turn13 : begin
	r_sqrmin=0;
	h2=33;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st26_triwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx13=(x_cord)*30+314+15;
						yy13=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						draw13c <=1;
						invalid <=0;
	 D2G <= 4'b0110;
	 D2B <= 4'b0111;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPB <= x_cord;
	 sayiLPB <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
			if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b10;
			turnnumber = st14_turn14;
	end
	end
	st14_turn14 : begin
	r_sqrmin=24*24;
	h2=0;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st27_cirwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx14=(x_cord)*30+314+15;
						yy14=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw14c <=1;
	 D2G <= 4'b0111;
	 D2B <= 4'b0111;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPG <= x_cord;
	 sayiLPG <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b01;
			turnnumber = st15_turn15;
	end
	end
	st15_turn15 : begin
	r_sqrmin=0;
	h2=33;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st26_triwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx15=(x_cord)*30+314+15;
						yy15=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw15c <=1;
							 D2G <= 4'b0111;
			D2B <= 4'b1000;
			D1G <= 2'b00;
			D1B <= 2'b00;
		 harfLPB <= x_cord;
	 sayiLPB <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b10;
			turnnumber = st16_turn16;
	end
	end
	st16_turn16 : begin
	r_sqrmin=24*24;
	h2=0;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st27_cirwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx16=(x_cord)*30+314+15;
						yy16=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw16c <=1;
	 D2G <= 4'b1000;
	 D2B <= 4'b1000;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPG <= x_cord;
	 sayiLPG <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
			if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b01;
			turnnumber = st17_turn17;
	end
	end
	st17_turn17 : begin
	r_sqrmin=24*24;
	h2=0;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st26_triwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx17=(x_cord)*30+314+15;
						yy17=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw17c <=1;
	 D2G <= 4'b1000;
	 D2B <= 4'b1001;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPB <= x_cord;
	 sayiLPB <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
			if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b10;
			turnnumber = st18_turn18;
	end
	end
	st18_turn18 : begin
	r_sqrmin=24*24;
	h2=0;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st27_cirwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx18=(x_cord)*30+314+15;
						yy18=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw18c <=1;
	 D2G <= 4'b1001;
	 D2B <= 4'b1001;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
		 harfLPG <= x_cord;
	 sayiLPG <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
			if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b01;
			turnnumber = st19_turn19;
	end
	end
	st19_turn19 : begin
	r_sqrmin=0;
	h2=0;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st26_triwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx19=(x_cord)*30+314+15;
						yy19=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw19c <=1;
	 D2G <= 4'b1001;
	 D2B <= 4'b0000;
	 D1G <= 2'b00;
	 D1B <= 2'b01;
		 harfLPB <= x_cord;
	 sayiLPB <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b10;
			turnnumber = st20_turn20;
	end
	end
	st20_turn20 : begin
	r_sqrmin=24*24;
	h2=0;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st27_cirwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx20=(x_cord)*30+314+15;
						yy20=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw20c <=1;
	 D2G <= 4'b0000;
	 D2B <= 4'b0000;
	 D1G <= 2'b01;
	 D1B <= 2'b01;
		 harfLPG <= x_cord;
	 sayiLPG <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
			if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b01;
			turnnumber = st21_turn21;
	end
	end
	st21_turn21 : begin
	r_sqrmin=0;
	h2=33;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st26_triwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx21=(x_cord)*30+314+15;
						yy21=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw21c <=1;
	 D2G <= 4'b0000;
	 D2B <= 4'b0001;
	 D1G <= 2'b01;
	 D1B <= 2'b01;
		 harfLPB <= x_cord;
	 sayiLPB <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b10;
			turnnumber = st22_turn22;
	end
	end
	st22_turn22 : begin
	r_sqrmin=24*24;
	h2=0;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st27_cirwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx22=(x_cord)*30+314+15;
						yy22=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw22c <=1;
	 D2G <= 4'b0001;
	 D2B <= 4'b0001;
	 D1G <= 2'b01;
	 D1B <= 2'b01;
		 harfLPG <= x_cord;
	 sayiLPG <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b01;
			turnnumber = st23_turn23;
	end
	end
	st23_turn23 : begin
	r_sqrmin=0;
	h2=33;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
	location_array[x_cord3][y_cord3] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st26_triwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx23=(x_cord)*30+314+15;
						yy23=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw23c <=1;
						draw3Red <=1;
						draw3c <=0;
	 D2G <= 4'b0001;
	 D2B <= 4'b0010;
	 D1G <= 2'b01;
	 D1B <= 2'b01;
		 harfLPB <= x_cord;
	 sayiLPB <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
	if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b10;
			turnnumber = st24_turn24;
	end
	end
	st24_turn24 : begin
	r_sqrmin=24*24;
	h2=0;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
	location_array[x_cord3][y_cord3] <= 2'b11;
	location_array[x_cord4][y_cord4] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st27_cirwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx24=(x_cord)*30+314+15;
						yy24=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw24c <=1;
						draw4Red <=1;
						draw4c <=0;
	 D2G <= 4'b0010;
	 D2B <= 4'b0010;
	 D1G <= 2'b01;
	 D1B <= 2'b01;
		 harfLPG <= x_cord;
	 sayiLPG <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
			if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b01;
			turnnumber = st25_turn25;
	end
	end
	st25_turn25 : begin
	r_sqrmin=0;
	h2=33;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
	location_array[x_cord3][y_cord3] <= 2'b11;
	location_array[x_cord4][y_cord4] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st26_triwin;
			end
			if (logic0 == 0 && logic_0_counter < 'd100) begin
		logic_0_counter <= logic_0_counter + 'd1;
		if (logic0 == 0 && press_counter == 2'b00 && logic_0_counter == 'd60) begin
			number_out <= {1'b0, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	else if (logic1 == 0 && logic_1_counter < 'd100) begin
		logic_1_counter <= logic_1_counter + 'd1;
		if (logic1 == 0 && press_counter == 2'b00 && logic_1_counter == 'd60) begin
			number_out <= {1'b1, number_out[7:1]};
			press_counter <= press_counter + 1;
		end
	end
	 else if (activity == 0 && activity_counter < 'd100) begin
		activity_counter = activity_counter + 1;
		if (activity == 0 && activity_counter == 'd60) begin
				x_cord = number_out[3:0];
				y_cord = number_out[7:4];
					  xx25=(x_cord)*30+314+15;
						yy25=(y_cord)*30+35+15+25;
						if (location_array[x_cord][y_cord] == 2'b00 && ~(x_cord > 4'b1001 || y_cord > 4'b1001))begin
						done <= 1;
						invalid <=0;
						draw25c <=1;
	 D2G <= 4'b0010;
	 D2B <= 4'b0011;
	 D1G <= 2'b01;
	 D1B <= 2'b01;
		 harfLPB <= x_cord;
	 sayiLPB <= y_cord;
						end
						else if ((location_array[x_cord][y_cord] != 2'b00) || (x_cord > 4'b1001 || y_cord > 4'b1001) ) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						invalid <=1;
						end
						end
	 end
	else if (logic1 == 1 && logic0 == 1) begin
	  press_counter <= 2'b00;
		logic_0_counter <= 'd0;
		logic_1_counter <= 'd0;
	end
			if(pixel_x== 797 && pixel_y == 520 && done==1 && activity == 1) begin
			number_out <= 8'b0000000;
			done <= 0;
			logic_0_counter <= 'd0;
			logic_1_counter <= 'd0;
			activity_counter = 'd0;
			location_array[x_cord][y_cord] <= 2'b10;
			turnnumber = st29_turn29;
	end
	end
	st26_triwin :  begin
	if(winnerscreen == 250000000) begin
						lastwinter <= 0;
						DWG <= DWG + 1;
	 D2G <= 4'b0000;
	 D2B <= 4'b0000;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
						winLed<=0;
						winnerscreen <= 0;
							for (i = 0; i < 10; i = i + 1) begin
			for (j = 0; j < 10; j = j + 1) begin
				location_array[i][j] <= 2'b00;
			end
		end
		  mainstate <= 2'b00;
						end
				else begin
				if ((pixel_y >= y1 && pixel_y < y1 + h) &&
			(pixel_x > x1 - (pixel_y - y1)) &&
			(pixel_x < x1 + (pixel_y - y1))            ) begin
			red_code <= 255;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == x1 + (pixel_y - y1) &&  pixel_y == y1 + h )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		if ((pixel_y >= y2 && pixel_y < y2 + 1) &&
			(pixel_x > x2 - (pixel_y - y2)) &&
			(pixel_x < x2 + (pixel_y - y2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
			winLed <=1;
		  winnerscreen <= winnerscreen +1;
			end
	end
	st27_cirwin :  begin
			if(winnerscreen == 250000000) begin
						lastwinter <= 1;
						winLed<=0;
						 D2G <= 4'b0000;
	 D2B <= 4'b0000;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
	 DWB <= DWB + 1;
						winnerscreen <= 0;
							for (i = 0; i < 10; i = i + 1) begin
			for (j = 0; j < 10; j = j + 1) begin
				location_array[i][j] <= 2'b00;
			end
		end
		  mainstate <= 2'b00;
						end
						else begin
			if (((pixel_x - a) * (pixel_x - a) + (pixel_y - b) * (pixel_y - b)) <= r_sqr   &&  ((pixel_x - a) * (pixel_x - a) + (pixel_y - b) * (pixel_y - b)) >= 1) begin
			red_code <= 255;
			blue_code <= 0;
			green_code <= 255;
		end
		else if (((pixel_x - a) * (pixel_x - a) + (pixel_y - b) * (pixel_y - b)) == r_sqr+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
						winnerscreen <= winnerscreen +1;
			end
	end
	st28_draw :  begin
	if(winnerscreen == 250000000) begin
						lastwinter <= 1;
						 D2G <= 4'b0000;
	 D2B <= 4'b0000;
	 D1G <= 2'b00;
	 D1B <= 2'b00;
						winLed<=0;
							for (i = 0; i < 10; i = i + 1) begin
			for (j = 0; j < 10; j = j + 1) begin
				location_array[i][j] <= 2'b00;
			end
		end
		  winnerscreen <= 0;
		  mainstate <= 2'b00;
						end
						else begin
	if (((pixel_x - a) * (pixel_x - a) + (pixel_y - b) * (pixel_y - b)) <= r_sqr   &&  ((pixel_x - a) * (pixel_x - a) + (pixel_y - b) * (pixel_y - b)) >= 1) begin
			red_code <= 255;
			blue_code <= 0;
			green_code <= 255;
		end
		else if (((pixel_x - a) * (pixel_x - a) + (pixel_y - b) * (pixel_y - b)) == r_sqr+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
				if ((pixel_y >= y1 && pixel_y < y1 + h) &&
			(pixel_x > x1 - (pixel_y - y1)) &&
			(pixel_x < x1 + (pixel_y - y1))            ) begin
			red_code <= 255;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == x1 + (pixel_y - y1) &&  pixel_y == y1 + h )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		if ((pixel_y >= y2 && pixel_y < y2 + 1) &&
			(pixel_x > x2 - (pixel_y - y2)) &&
			(pixel_x < x2 + (pixel_y - y2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
						winnerscreen <= winnerscreen +1;
						end
	end
	st29_turn29 : begin
	r_sqrmin=24*24;
	h2=0;
	location_array[x_cord1][y_cord1] <= 2'b11;
	location_array[x_cord2][y_cord2] <= 2'b11;
	location_array[x_cord3][y_cord3] <= 2'b11;
	location_array[x_cord4][y_cord4] <= 2'b11;
			if(winLed == 1) begin
			turnnumber = st27_cirwin;
			end
			else begin
			turnnumber = st28_draw;
			end
	end
	endcase
	end
	endcase
	if ( draw1 ==1) begin
		if ((pixel_y >= yy1-5 && pixel_y < yy1-5 + h3) &&
			(pixel_x > xx1 - (pixel_y - yy1+5)) &&
			(pixel_x < xx1 + (pixel_y - yy1+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx1 + (pixel_y - yy1+5) &&  pixel_y == yy1-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		if ((pixel_y >= yy1-1 && pixel_y < yy1+-1 + h3-5) &&
			(pixel_x > xx1 - (pixel_y - yy1+2)) &&
			(pixel_x < xx1 + (pixel_y - yy1+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
	end
	if (draw2==1 ) begin
					if (((pixel_x - xx2) * (pixel_x - xx2) + (pixel_y - yy2) * (pixel_y - yy2)) <= r_sqr1   &&  ((pixel_x - xx2) * (pixel_x - xx2) + (pixel_y - yy2) * (pixel_y - yy2)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx2) * (pixel_x - xx2) + (pixel_y - yy2) * (pixel_y - yy2)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
						end
		if (draw3==1) begin
		if ((pixel_y >= yy3-5 && pixel_y < yy3-5 + h3) &&
			(pixel_x > xx3 - (pixel_y - yy3+5)) &&
			(pixel_x < xx3 + (pixel_y - yy3+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx3 + (pixel_y - yy3+5) &&  pixel_y == yy3-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		if ((pixel_y >= yy3-1 && pixel_y < yy3+-1 + h3-5) &&
			(pixel_x > xx3 - (pixel_y - yy3+2)) &&
			(pixel_x < xx3 + (pixel_y - yy3+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
	end
	if (draw1Red == 1 ) begin
		if (pixel_x >= xx1- 8 && pixel_x < xx1 +8  && pixel_y >= yy1- 8 && pixel_y < yy1 +8) begin
	red_code <= 255;
	blue_code <= 0;
	green_code <= 0;
		end
		if (pixel_x == xx1 +8 && pixel_y >= yy1- 8 && pixel_y < yy1 +8) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
	end
	if (draw2Red == 1 ) begin
				if (pixel_x >= xx2- 8 && pixel_x < xx2 +8  && pixel_y >= yy2- 8 && pixel_y < yy2 +8) begin
	red_code <= 255;
	blue_code <= 0;
	green_code <= 0;
		end
		if (pixel_x == xx2 +8 && pixel_y >= yy2- 8 && pixel_y < yy2 +8) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
						end
		if (draw4 ==1) begin
					if (((pixel_x - xx4) * (pixel_x - xx4) + (pixel_y - yy4) * (pixel_y - yy4)) <= r_sqr1   &&  ((pixel_x - xx4) * (pixel_x - xx4) + (pixel_y - yy4) * (pixel_y - yy4)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx4) * (pixel_x - xx4) + (pixel_y - yy4) * (pixel_y - yy4)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		if (draw5 ==1) begin
		if ((pixel_y >= yy5-5 && pixel_y < yy5-5 + h3) &&
			(pixel_x > xx5 - (pixel_y - yy5+5)) &&
			(pixel_x < xx5 + (pixel_y - yy5+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx5 + (pixel_y - yy5+5) &&  pixel_y == yy5-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		if ((pixel_y >= yy5-1 && pixel_y < yy5+-1 + h3-5) &&
			(pixel_x > xx5 - (pixel_y - yy5+2)) &&
			(pixel_x < xx5 + (pixel_y - yy5+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
	end
	if (draw6 ==1 ) begin
					if (((pixel_x - xx6) * (pixel_x - xx6) + (pixel_y - yy6) * (pixel_y - yy6)) <= r_sqr1   &&  ((pixel_x - xx6) * (pixel_x - xx6) + (pixel_y - yy6) * (pixel_y - yy6)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx6) * (pixel_x - xx6) + (pixel_y - yy6) * (pixel_y - yy6)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
						end
		if (draw7 ==1 ) begin
		if ((pixel_y >= yy7-5 && pixel_y < yy7-5 + h3) &&
			(pixel_x > xx7 - (pixel_y - yy7+5)) &&
			(pixel_x < xx7 + (pixel_y - yy7+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx7 + (pixel_y - yy7+5) &&  pixel_y == yy7-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		if ((pixel_y >= yy7-1 && pixel_y < yy7+-1 + h3-5) &&
			(pixel_x > xx7 - (pixel_y - yy7+2)) &&
			(pixel_x < xx7 + (pixel_y - yy7+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		if (draw8 ==1) begin
					if (((pixel_x - xx8) * (pixel_x - xx8) + (pixel_y - yy8) * (pixel_y - yy8)) <= r_sqr1   &&  ((pixel_x - xx8) * (pixel_x - xx8) + (pixel_y - yy8) * (pixel_y - yy8)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx8) * (pixel_x - xx8) + (pixel_y - yy8) * (pixel_y - yy8)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
						end
			if (draw9 ==1) begin
		if ((pixel_y >= yy9-5 && pixel_y < yy9-5 + h3) &&
			(pixel_x > xx9 - (pixel_y - yy9+5)) &&
			(pixel_x < xx9 + (pixel_y - yy9+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx9 + (pixel_y - yy9+5) &&  pixel_y == yy9-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		if ((pixel_y >= yy9-1 && pixel_y < yy9+-1 + h3-5) &&
			(pixel_x > xx9 - (pixel_y - yy9+2)) &&
			(pixel_x < xx9 + (pixel_y - yy9+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
			if (draw10 ==1 ) begin
					if (((pixel_x - xx10) * (pixel_x - xx10) + (pixel_y - yy10) * (pixel_y - yy10)) <= r_sqr1   &&  ((pixel_x - xx10) * (pixel_x - xx10) + (pixel_y - yy10) * (pixel_y - yy10)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx10) * (pixel_x - xx10) + (pixel_y - yy10) * (pixel_y - yy10)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
						end
				if (draw11 ==1 ) begin
		if ((pixel_y >= yy11-5 && pixel_y < yy11-5 + h3) &&
			(pixel_x > xx11 - (pixel_y - yy11+5)) &&
			(pixel_x < xx11 + (pixel_y - yy11+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx11 + (pixel_y - yy11+5) &&  pixel_y == yy11-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		if ((pixel_y >= yy11-1 && pixel_y < yy11+-1 + h3-5) &&
			(pixel_x > xx11 - (pixel_y - yy11+2)) &&
			(pixel_x < xx11 + (pixel_y - yy11+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
			if (draw12 ==1 ) begin
					if (((pixel_x - xx12) * (pixel_x - xx12) + (pixel_y - yy12) * (pixel_y - yy12)) <= r_sqr1   &&  ((pixel_x - xx12) * (pixel_x - xx12) + (pixel_y - yy12) * (pixel_y - yy12)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx12) * (pixel_x - xx12) + (pixel_y - yy12) * (pixel_y - yy12)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
						end
		if (draw13 ==1 ) begin
		if ((pixel_y >= yy13-5 && pixel_y < yy13-5 + h3) &&
			(pixel_x > xx13 - (pixel_y - yy13+5)) &&
			(pixel_x < xx13 + (pixel_y - yy13+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx13 + (pixel_y - yy13+5) &&  pixel_y == yy13-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		if ((pixel_y >= yy13-1 && pixel_y < yy13+-1 + h3-5) &&
			(pixel_x > xx13 - (pixel_y - yy13+2)) &&
			(pixel_x < xx13 + (pixel_y - yy13+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
			if (draw14 ==1  ) begin
					if (((pixel_x - xx14) * (pixel_x - xx14) + (pixel_y - yy14) * (pixel_y - yy14)) <= r_sqr1   &&  ((pixel_x - xx14) * (pixel_x - xx14) + (pixel_y - yy14) * (pixel_y - yy14)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx14) * (pixel_x - xx14) + (pixel_y - yy14) * (pixel_y - yy14)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
						end
						if (draw15 ==1) begin
		if ((pixel_y >= yy15-5 && pixel_y < yy15-5 + h3) &&
			(pixel_x > xx15 - (pixel_y - yy15+5)) &&
			(pixel_x < xx15 + (pixel_y - yy15+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx15 + (pixel_y - yy15+5) &&  pixel_y == yy15-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		if ((pixel_y >= yy15-1 && pixel_y < yy15+-1 + h3-5) &&
			(pixel_x > xx15 - (pixel_y - yy15+2)) &&
			(pixel_x < xx15 + (pixel_y - yy15+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
			if (draw16 ==1 ) begin
					if (((pixel_x - xx16) * (pixel_x - xx16) + (pixel_y - yy16) * (pixel_y - yy16)) <= r_sqr1   &&  ((pixel_x - xx16) * (pixel_x - xx16) + (pixel_y - yy16) * (pixel_y - yy16)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx16) * (pixel_x - xx16) + (pixel_y - yy16) * (pixel_y - yy16)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
						end
			if (draw3Red ==1) begin
		if (pixel_x >= xx3- 8 && pixel_x < xx3 +8  && pixel_y >= yy3- 8 && pixel_y < yy3 +8) begin
	red_code <= 255;
	blue_code <= 0;
	green_code <= 0;
		end
		if (pixel_x == xx3 +8 && pixel_y >= yy3- 8 && pixel_y < yy3 +8) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
	end
	if (draw4Red ==1) begin
				if (pixel_x >= xx4- 8 && pixel_x < xx4 +8  && pixel_y >= yy4- 8 && pixel_y < yy4 +8) begin
	red_code <= 255;
	blue_code <= 0;
	green_code <= 0;
		end
		if (pixel_x == xx4 +8 && pixel_y >= yy4- 8 && pixel_y < yy4 +8) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
						end
		if (draw17 ==1 ) begin
		if ((pixel_y >= yy17-5 && pixel_y < yy17-5 + h3) &&
			(pixel_x > xx17 - (pixel_y - yy17+5)) &&
			(pixel_x < xx17 + (pixel_y - yy17+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx17 + (pixel_y - yy17+5) &&  pixel_y == yy17-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		if ((pixel_y >= yy17-1 && pixel_y < yy17+-1 + h3-5) &&
			(pixel_x > xx17 - (pixel_y - yy17+2)) &&
			(pixel_x < xx17 + (pixel_y - yy17+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
			if (draw18 ==1 ) begin
					if (((pixel_x - xx18) * (pixel_x - xx18) + (pixel_y - yy18) * (pixel_y - yy18)) <= r_sqr1   &&  ((pixel_x - xx18) * (pixel_x - xx18) + (pixel_y - yy18) * (pixel_y - yy18)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx18) * (pixel_x - xx18) + (pixel_y - yy18) * (pixel_y - yy18)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
						end
			if (draw5Red ==1) begin
		if (pixel_x >= xx5- 8 && pixel_x < xx5 +8  && pixel_y >= yy5- 8 && pixel_y < yy5 +8) begin
	red_code <= 255;
	blue_code <= 0;
	green_code <= 0;
		end
		if (pixel_x == xx5 +8 && pixel_y >= yy5- 8 && pixel_y < yy5 +8) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
	end
	if (draw6Red ==1 ) begin
				if (pixel_x >= xx6- 8 && pixel_x < xx6 +8  && pixel_y >= yy6- 8 && pixel_y < yy6 +8) begin
	red_code <= 255;
	blue_code <= 0;
	green_code <= 0;
		end
		if (pixel_x == xx6 +8 && pixel_y >= yy6- 8 && pixel_y < yy6 +8) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
						end
		if (draw19 ==1) begin
		if ((pixel_y >= yy19-5 && pixel_y < yy19-5 + h3) &&
			(pixel_x > xx19 - (pixel_y - yy19+5)) &&
			(pixel_x < xx19 + (pixel_y - yy19+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx19 + (pixel_y - yy19+5) &&  pixel_y == yy19-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		if ((pixel_y >= yy19-1 && pixel_y < yy19+-1 + h3-5) &&
			(pixel_x > xx19 - (pixel_y - yy19+2)) &&
			(pixel_x < xx19 + (pixel_y - yy19+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		if (draw20 ==1  ) begin
					if (((pixel_x - xx20) * (pixel_x - xx20) + (pixel_y - yy20) * (pixel_y - yy20)) <= r_sqr1   &&  ((pixel_x - xx20) * (pixel_x - xx20) + (pixel_y - yy20) * (pixel_y - yy20)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx20) * (pixel_x - xx20) + (pixel_y - yy20) * (pixel_y - yy20)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
						end
									if (draw21 ==1 ) begin
		if ((pixel_y >= yy21-5 && pixel_y < yy21-5 + h3) &&
			(pixel_x > xx21 - (pixel_y - yy21+5)) &&
			(pixel_x < xx21 + (pixel_y - yy21+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx21 + (pixel_y - yy21+5) &&  pixel_y == yy21-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		if ((pixel_y >= yy21-1 && pixel_y < yy21+-1 + h3-5) &&
			(pixel_x > xx21 - (pixel_y - yy21+2)) &&
			(pixel_x < xx21 + (pixel_y - yy21+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
			if (draw22 ==1  ) begin
					if (((pixel_x - xx22) * (pixel_x - xx22) + (pixel_y - yy22) * (pixel_y - yy22)) <= r_sqr1   &&  ((pixel_x - xx22) * (pixel_x - xx22) + (pixel_y - yy22) * (pixel_y - yy22)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx22) * (pixel_x - xx22) + (pixel_y - yy22) * (pixel_y - yy22)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
						end
												if (draw23 ==1  ) begin
		if ((pixel_y >= yy23-5 && pixel_y < yy23-5 + h3) &&
			(pixel_x > xx23 - (pixel_y - yy23+5)) &&
			(pixel_x < xx23 + (pixel_y - yy23+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx23 + (pixel_y - yy23+5) &&  pixel_y == yy23-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		if ((pixel_y >= yy23-1 && pixel_y < yy23+-1 + h3-5) &&
			(pixel_x > xx23 - (pixel_y - yy23+2)) &&
			(pixel_x < xx23 + (pixel_y - yy23+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
			if (draw24 ==1 ) begin
					if (((pixel_x - xx24) * (pixel_x - xx24) + (pixel_y - yy24) * (pixel_y - yy24)) <= r_sqr1   &&  ((pixel_x - xx24) * (pixel_x - xx24) + (pixel_y - yy24) * (pixel_y - yy24)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx24) * (pixel_x - xx24) + (pixel_y - yy24) * (pixel_y - yy24)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
						end
						if (draw25 ==1) begin
		if ((pixel_y >= yy25-5 && pixel_y < yy25-5 + h3) &&
			(pixel_x > xx25 - (pixel_y - yy25+5)) &&
			(pixel_x < xx25 + (pixel_y - yy25+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx25 + (pixel_y - yy25+5) &&  pixel_y == yy25-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		if ((pixel_y >= yy25-1 && pixel_y < yy25+-1 + h3-5) &&
			(pixel_x > xx25 - (pixel_y - yy25+2)) &&
			(pixel_x < xx25 + (pixel_y - yy25+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		if (draw1c == 1) begin
		if (((pixel_x - xx1) * (pixel_x - xx1) + (pixel_y - yy1) * (pixel_y - yy1)) <= r_sqr1   &&  ((pixel_x - xx1) * (pixel_x - xx1) + (pixel_y - yy1) * (pixel_y - yy1)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx1) * (pixel_x - xx1) + (pixel_y - yy1) * (pixel_y - yy1)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		if (draw2c == 1) begin
		if ((pixel_y >= yy2-5 && pixel_y < yy2-5 + h3) &&
			(pixel_x > xx2 - (pixel_y - yy2+5)) &&
			(pixel_x < xx2 + (pixel_y - yy2+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx2 + (pixel_y - yy2+5) &&  pixel_y == yy2-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
			end
		if ((pixel_y >= yy2-1 && pixel_y < yy2+-1 + h3-5) &&
			(pixel_x > xx2 - (pixel_y - yy2+2)) &&
			(pixel_x < xx2 + (pixel_y - yy2+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
	//
	if (draw3c == 1) begin
		if (((pixel_x - xx3) * (pixel_x - xx3) + (pixel_y - yy3) * (pixel_y - yy3)) <= r_sqr1   &&  ((pixel_x - xx3) * (pixel_x - xx3) + (pixel_y - yy3) * (pixel_y - yy3)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx3) * (pixel_x - xx3) + (pixel_y - yy3) * (pixel_y - yy3)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		if (draw4c == 1) begin
		if ((pixel_y >= yy4-5 && pixel_y < yy4-5 + h3) &&
			(pixel_x > xx4 - (pixel_y - yy4+5)) &&
			(pixel_x < xx4 + (pixel_y - yy4+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx4 + (pixel_y - yy4+5) &&  pixel_y == yy4-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
			end
		if ((pixel_y >= yy4-1 && pixel_y < yy4+-1 + h3-5) &&
			(pixel_x > xx4 - (pixel_y - yy4+2)) &&
			(pixel_x < xx4 + (pixel_y - yy4+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
	//
		if (draw5c == 1) begin
		if (((pixel_x - xx5) * (pixel_x - xx5) + (pixel_y - yy5) * (pixel_y - yy5)) <= r_sqr1   &&  ((pixel_x - xx5) * (pixel_x - xx5) + (pixel_y - yy5) * (pixel_y - yy5)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx5) * (pixel_x - xx5) + (pixel_y - yy5) * (pixel_y - yy5)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		if (draw6c == 1) begin
		if ((pixel_y >= yy6-5 && pixel_y < yy6-5 + h3) &&
			(pixel_x > xx6 - (pixel_y - yy6+5)) &&
			(pixel_x < xx6 + (pixel_y - yy6+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx6 + (pixel_y - yy6+5) &&  pixel_y == yy6-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
			end
		if ((pixel_y >= yy6-1 && pixel_y < yy6+-1 + h3-5) &&
			(pixel_x > xx6 - (pixel_y - yy6+2)) &&
			(pixel_x < xx6 + (pixel_y - yy6+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		//
			if (draw7c == 1) begin
		if (((pixel_x - xx7) * (pixel_x - xx7) + (pixel_y - yy7) * (pixel_y - yy7)) <= r_sqr1   &&  ((pixel_x - xx7) * (pixel_x - xx7) + (pixel_y - yy7) * (pixel_y - yy7)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx7) * (pixel_x - xx7) + (pixel_y - yy7) * (pixel_y - yy7)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		if (draw8c == 1) begin
		if ((pixel_y >= yy8-5 && pixel_y < yy8-5 + h3) &&
			(pixel_x > xx8 - (pixel_y - yy8+5)) &&
			(pixel_x < xx8 + (pixel_y - yy8+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx8 + (pixel_y - yy8+5) &&  pixel_y == yy8-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
			end
		if ((pixel_y >= yy8-1 && pixel_y < yy8+-1 + h3-5) &&
			(pixel_x > xx8 - (pixel_y - yy8+2)) &&
			(pixel_x < xx8 + (pixel_y - yy8+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		//
			if (draw9c == 1) begin
		if (((pixel_x - xx9) * (pixel_x - xx9) + (pixel_y - yy9) * (pixel_y - yy9)) <= r_sqr1   &&  ((pixel_x - xx9) * (pixel_x - xx9) + (pixel_y - yy9) * (pixel_y - yy9)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx9) * (pixel_x - xx9) + (pixel_y - yy9) * (pixel_y - yy9)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		if (draw10c == 1) begin
		if ((pixel_y >= yy10-5 && pixel_y < yy10-5 + h3) &&
			(pixel_x > xx10 - (pixel_y - yy10+5)) &&
			(pixel_x < xx10 + (pixel_y - yy10+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx10 + (pixel_y - yy10+5) &&  pixel_y == yy10-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
			end
		if ((pixel_y >= yy10-1 && pixel_y < yy10+-1 + h3-5) &&
			(pixel_x > xx10 - (pixel_y - yy10+2)) &&
			(pixel_x < xx10 + (pixel_y - yy10+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		//
			if (draw11c == 1) begin
		if (((pixel_x - xx11) * (pixel_x - xx11) + (pixel_y - yy11) * (pixel_y - yy11)) <= r_sqr1   &&  ((pixel_x - xx11) * (pixel_x - xx11) + (pixel_y - yy11) * (pixel_y - yy11)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx11) * (pixel_x - xx11) + (pixel_y - yy11) * (pixel_y - yy11)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		if (draw12c == 1) begin
		if ((pixel_y >= yy12-5 && pixel_y < yy12-5 + h3) &&
			(pixel_x > xx12 - (pixel_y - yy12+5)) &&
			(pixel_x < xx12 + (pixel_y - yy12+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx12 + (pixel_y - yy12+5) &&  pixel_y == yy12-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
			end
		if ((pixel_y >= yy12-1 && pixel_y < yy12+-1 + h3-5) &&
			(pixel_x > xx12 - (pixel_y - yy12+2)) &&
			(pixel_x < xx12 + (pixel_y - yy12+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		//
				if (draw13c == 1) begin
		if (((pixel_x - xx13) * (pixel_x - xx13) + (pixel_y - yy13) * (pixel_y - yy13)) <= r_sqr1   &&  ((pixel_x - xx13) * (pixel_x - xx13) + (pixel_y - yy13) * (pixel_y - yy13)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx13) * (pixel_x - xx13) + (pixel_y - yy13) * (pixel_y - yy13)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		if (draw14c == 1) begin
		if ((pixel_y >= yy14-5 && pixel_y < yy14-5 + h3) &&
			(pixel_x > xx14 - (pixel_y - yy14+5)) &&
			(pixel_x < xx14 + (pixel_y - yy14+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx14 + (pixel_y - yy14+5) &&  pixel_y == yy14-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
			end
		if ((pixel_y >= yy14-1 && pixel_y < yy14+-1 + h3-5) &&
			(pixel_x > xx14 - (pixel_y - yy14+2)) &&
			(pixel_x < xx14 + (pixel_y - yy14+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		//
				if (draw15c == 1) begin
		if (((pixel_x - xx15) * (pixel_x - xx15) + (pixel_y - yy15) * (pixel_y - yy15)) <= r_sqr1   &&  ((pixel_x - xx15) * (pixel_x - xx15) + (pixel_y - yy15) * (pixel_y - yy15)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx15) * (pixel_x - xx15) + (pixel_y - yy15) * (pixel_y - yy15)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		if (draw16c == 1) begin
		if ((pixel_y >= yy16-5 && pixel_y < yy16-5 + h3) &&
			(pixel_x > xx16 - (pixel_y - yy16+5)) &&
			(pixel_x < xx16 + (pixel_y - yy16+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx16 + (pixel_y - yy16+5) &&  pixel_y == yy16-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
			end
		if ((pixel_y >= yy16-1 && pixel_y < yy16+-1 + h3-5) &&
			(pixel_x > xx16 - (pixel_y - yy16+2)) &&
			(pixel_x < xx16 + (pixel_y - yy16+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		//
				if (draw17c == 1) begin
		if (((pixel_x - xx17) * (pixel_x - xx17) + (pixel_y - yy17) * (pixel_y - yy17)) <= r_sqr1   &&  ((pixel_x - xx17) * (pixel_x - xx17) + (pixel_y - yy17) * (pixel_y - yy17)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx17) * (pixel_x - xx17) + (pixel_y - yy17) * (pixel_y - yy17)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		if (draw18c == 1) begin
		if ((pixel_y >= yy18-5 && pixel_y < yy18-5 + h3) &&
			(pixel_x > xx18 - (pixel_y - yy18+5)) &&
			(pixel_x < xx18 + (pixel_y - yy18+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx18 + (pixel_y - yy18+5) &&  pixel_y == yy18-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
			end
		if ((pixel_y >= yy18-1 && pixel_y < yy18+-1 + h3-5) &&
			(pixel_x > xx18 - (pixel_y - yy18+2)) &&
			(pixel_x < xx18 + (pixel_y - yy18+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		//
				if (draw19c == 1) begin
		if (((pixel_x - xx19) * (pixel_x - xx19) + (pixel_y - yy19) * (pixel_y - yy19)) <= r_sqr1   &&  ((pixel_x - xx19) * (pixel_x - xx19) + (pixel_y - yy19) * (pixel_y - yy19)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx19) * (pixel_x - xx19) + (pixel_y - yy19) * (pixel_y - yy19)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		if (draw20c == 1) begin
		if ((pixel_y >= yy20-5 && pixel_y < yy20-5 + h3) &&
			(pixel_x > xx20 - (pixel_y - yy20+5)) &&
			(pixel_x < xx20 + (pixel_y - yy20+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx20 + (pixel_y - yy20+5) &&  pixel_y == yy20-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
			end
		if ((pixel_y >= yy20-1 && pixel_y < yy20+-1 + h3-5) &&
			(pixel_x > xx20 - (pixel_y - yy20+2)) &&
			(pixel_x < xx20 + (pixel_y - yy20+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		//
				if (draw21c == 1) begin
		if (((pixel_x - xx21) * (pixel_x - xx21) + (pixel_y - yy21) * (pixel_y - yy21)) <= r_sqr1   &&  ((pixel_x - xx21) * (pixel_x - xx21) + (pixel_y - yy21) * (pixel_y - yy21)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx21) * (pixel_x - xx21) + (pixel_y - yy21) * (pixel_y - yy21)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		if (draw22c == 1) begin
		if ((pixel_y >= yy22-5 && pixel_y < yy22-5 + h3) &&
			(pixel_x > xx22 - (pixel_y - yy22+5)) &&
			(pixel_x < xx22 + (pixel_y - yy22+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx22 + (pixel_y - yy22+5) &&  pixel_y == yy22-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
			end
		if ((pixel_y >= yy22-1 && pixel_y < yy22+-1 + h3-5) &&
			(pixel_x > xx22 - (pixel_y - yy22+2)) &&
			(pixel_x < xx22 + (pixel_y - yy22+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		//
				if (draw23c == 1) begin
		if (((pixel_x - xx23) * (pixel_x - xx23) + (pixel_y - yy23) * (pixel_y - yy23)) <= r_sqr1   &&  ((pixel_x - xx23) * (pixel_x - xx23) + (pixel_y - yy23) * (pixel_y - yy23)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx23) * (pixel_x - xx23) + (pixel_y - yy23) * (pixel_y - yy23)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		if (draw24c == 1) begin
		if ((pixel_y >= yy24-5 && pixel_y < yy24-5 + h3) &&
			(pixel_x > xx24 - (pixel_y - yy24+5)) &&
			(pixel_x < xx24 + (pixel_y - yy24+5))            ) begin
			red_code <= 0;
			blue_code <= 0;
			green_code <= 255;
			end
			else if (pixel_x == xx24 + (pixel_y - yy24+5) &&  pixel_y == yy24-5 + h3 )       begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
			end
		if ((pixel_y >= yy24-1 && pixel_y < yy24+-1 + h3-5) &&
			(pixel_x > xx24 - (pixel_y - yy24+2)) &&
			(pixel_x < xx24 + (pixel_y - yy24+2))            ) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		//
			if (draw25c == 1) begin
		if (((pixel_x - xx25) * (pixel_x - xx25) + (pixel_y - yy25) * (pixel_y - yy25)) <= r_sqr1   &&  ((pixel_x - xx25) * (pixel_x - xx25) + (pixel_y - yy25) * (pixel_y - yy25)) >= r_sqrmin1) begin
			red_code <= 0;
			blue_code <= 255;
			green_code <= 0;
		end
		else if (((pixel_x - xx25) * (pixel_x - xx25) + (pixel_y - yy25) * (pixel_y - yy25)) == r_sqr1+1) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		end
		if(invalid == 1) begin
			 if (((pixel_x - uyari_x) * (pixel_x - uyari_x) + (pixel_y - uyari_y) * (pixel_y - uyari_y)) <= 625   &&  ((pixel_x - uyari_x) * (pixel_x - uyari_x) + (pixel_y - uyari_y) * (pixel_y - uyari_y)) >= 1) begin
			red_code <= 255;
			blue_code <= 0;
			green_code <= 0;
		end
		else if (((pixel_x - uyari_x) * (pixel_x - uyari_x) + (pixel_y - uyari_y) * (pixel_y - uyari_y)) == 627) begin
			red_code <= 255;
			blue_code <= 255;
			green_code <= 255;
		end
		if(invalid_counter == 25000000) begin
						done <= 0;
						logic_0_counter <= 'd0;
						logic_1_counter <= 'd0;
						activity_counter = 'd0;
						press_counter <= 'd0;
						invalid <=0;
						invalid_counter <=0;
						end
						else begin
						invalid_counter <= invalid_counter +1;
						end
	 end
	 for (m = 0; m < 10; m = m + 1) begin
		for (n = 0; n < 7; n = n + 1) begin
			if ((location_array[m][n] == 2'b01 && location_array[m][n+1] == 2'b01 &&
				location_array[m][n+2] == 2'b01 && location_array[m][n+3] == 2'b01) || (location_array[m][n] == 2'b10 && location_array[m][n+1] == 2'b10 &&
				location_array[m][n+2] == 2'b10 && location_array[m][n+3] == 2'b10)) begin
					winLed <= 1'b1;
							start_m = m;
					start_n = n;
					end_m = m;
					end_n = n+3;
			end
		end
	end
	for (m = 0; m < 7; m = m + 1) begin
		for (n = 0; n < 10; n = n + 1) begin
			if ((location_array[m][n] == 2'b01 && location_array[m+1][n] == 2'b01 &&
				location_array[m+2][n] == 2'b01 && location_array[m+3][n] == 2'b01) || (location_array[m][n] == 2'b10 && location_array[m+1][n] == 2'b10 &&
				location_array[m+2][n] == 2'b10 && location_array[m+3][n] == 2'b10)) begin
					winLed <= 1'b1;
						   start_m = m;
					start_n = n;
					end_m = m+3;
					end_n = n;
			end
		end
	end
	for (m = 0; m < 7; m = m + 1) begin
		for (n = 0; n < 7; n = n + 1) begin
			if ((location_array[m][n] == 2'b01&& location_array[m+1][n+1] == 2'b01 &&
				location_array[m+2][n+2] == 2'b01 && location_array[m+3][n+3] == 2'b01) ||  (location_array[m][n] == 2'b10&& location_array[m+1][n+1] == 2'b10 &&
				location_array[m+2][n+2] == 2'b10 && location_array[m+3][n+3] == 2'b10)) begin
					winLed <= 1'b1;
						  start_m = m;
					start_n = n;
					end_m = m+3;
					end_n = n+3;
			end
		end
	end
	for (m = 0; m < 7; m = m + 1) begin
		for (n = 3; n < 10; n = n + 1) begin
			if ((location_array[m][n] == 2'b01 && location_array[m+1][n-1] == 2'b01 &&
				location_array[m+2][n-2] == 2'b01 && location_array[m+3][n-3] == 2'b01) || (location_array[m][n] == 2'b10 && location_array[m+1][n-1] == 2'b10 &&
				location_array[m+2][n-2] == 2'b10 && location_array[m+3][n-3] == 2'b10)) begin
					 winLed  <= 1'b1;
							   start_m = m;
					start_n = n;
					end_m = m+3;
					end_n = n-3;
			end
		end
		end
		if (winLed==1) begin
	xx26<=start_m*30+314+15;
	yy26<=start_n*30+35+15+25;
	xx27<=end_m*30+314+15;
	yy27<=end_n*30+35+15+25;
	if (start_m==end_m) begin
	if (pixel_y >= yy26 && pixel_y < yy27)
		begin
			if (pixel_x == xx26-1)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == xx26)
				begin
					red_code 	<= 255;
					blue_code 	<= 0;
					green_code 	<= 0;
				end
			else if (pixel_x == xx26+1)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	end
	else if (start_n == end_n) begin
	if (pixel_y == yy26)
		begin
			if (pixel_x == xx26-1)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= xx26 && pixel_x <= xx27)
				begin
					red_code 	<= 255;
					blue_code 	<= 0;
					green_code 	<= 0;
				end
			else if ( pixel_x == xx27+1)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	else begin
				if (end_m > start_m && end_n > start_n) begin
					 if (pixel_y == yy26)
		begin
			if (pixel_x == xx26-11)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= xx26 -10 && pixel_x <= xx26+10)
				begin
					red_code 	<= 255;
					blue_code 	<= 0;
					green_code 	<= 0;
				end
			else if ( pixel_x == xx27+11)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				 if (pixel_y == yy26+30)
		begin
			if (pixel_x == xx26+19)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= xx26 +20 && pixel_x <= xx26+40)
				begin
					red_code 	<= 255;
					blue_code 	<= 0;
					green_code 	<= 0;
				end
			else if ( pixel_x == xx27+41)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				if (pixel_y == yy26+60)
		begin
			if (pixel_x == xx26+49)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= xx26 +50 && pixel_x <= xx26+70)
				begin
					red_code 	<= 255;
					blue_code 	<= 0;
					green_code 	<= 0;
				end
			else if ( pixel_x == xx27+71)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				if (pixel_y == yy26+90)
		begin
			if (pixel_x == xx26+79)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= xx26 +80 && pixel_x <= xx26+100)
				begin
					red_code 	<= 255;
					blue_code 	<= 0;
					green_code 	<= 0;
				end
			else if ( pixel_x == xx27+111)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
				else if (end_m > start_m && end_n < start_n)begin
							 if (pixel_y == yy26)
		begin
			if (pixel_x == xx26-11)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= xx26 -10 && pixel_x <= xx26+10)
				begin
					red_code 	<= 255;
					blue_code 	<= 0;
					green_code 	<= 0;
				end
			else if ( pixel_x == xx27+11)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				 if (pixel_y == yy26-30)
		begin
			if (pixel_x == xx26+19)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= xx26 +20 && pixel_x <= xx26+40)
				begin
					red_code 	<= 255;
					blue_code 	<= 0;
					green_code 	<= 0;
				end
			else if ( pixel_x == xx27+41)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				if (pixel_y == yy26-60)
		begin
			if (pixel_x == xx26+49)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= xx26 +50 && pixel_x <= xx26+70)
				begin
					red_code 	<= 255;
					blue_code 	<= 0;
					green_code 	<= 0;
				end
			else if ( pixel_x == xx27+71)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				if (pixel_y == yy26-90)
		begin
			if (pixel_x == xx26+79)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= xx26 +80 && pixel_x <= xx26+100)
				begin
					red_code 	<= 255;
					blue_code 	<= 0;
					green_code 	<= 0;
				end
			else if ( pixel_x == xx27+111)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	end
		end
		case(D2G)
	4'b0000: begin
	if (pixel_y >= 400 && pixel_y <= 420)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 370 || pixel_x == 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 371 || pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 400 || pixel_y == 420)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 370 && pixel_x <= 380)
				begin
				red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0001: begin
	if (pixel_y >= 400 && pixel_y <= 420)
		begin
			if (pixel_x == 379)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	end
	4'b0010: begin
	if (pixel_y == 400 || pixel_y == 410 || pixel_y == 420)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 370 && pixel_x <= 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				if (pixel_y >= 400 && pixel_y < 410)
		begin
			if (pixel_x == 379)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y >= 410 && pixel_y < 420)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 370)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 371)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	end
	4'b0011: begin
	if (pixel_y >= 400 && pixel_y <= 420)
		begin
			if (pixel_x == 379)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 400 || pixel_y == 410 || pixel_y == 420)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 370 && pixel_x <= 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0100: begin
	if (pixel_y >= 400 & pixel_y <= 410)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 370)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 371)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y >= 400 & pixel_y <= 420)
		begin
			if (pixel_x ==379)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 410)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 370 && pixel_x <= 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0101: begin
	if (pixel_y >= 400 & pixel_y <= 410)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 370)
				begin
				red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 371)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y >= 410 & pixel_y <= 420)
		begin
			if (pixel_x == 379)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 400 || pixel_y == 410 || pixel_y == 420)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 370 && pixel_x <= 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0110: begin
	if (pixel_y >= 400 & pixel_y <= 420)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 370)
				begin
				red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 371)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y >= 410 & pixel_y <= 420)
		begin
			if (pixel_x == 379)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 400 || pixel_y == 410 || pixel_y == 420)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 370 && pixel_x <= 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0111: begin
	if (pixel_y >= 400 & pixel_y <= 420)
		begin
			if (pixel_x == 379)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 400)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 370 && pixel_x <= 380)
				begin
				red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b1000: begin
	if (pixel_y >= 400 & pixel_y < 420)
		begin
			if (pixel_x == 379 || pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 370 || pixel_x == 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 371 || pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 400 || pixel_y == 410 || pixel_y == 420)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 370 && pixel_x <= 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b1001: begin
	if (pixel_y >= 400 & pixel_y <= 410)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 370)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 371)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y >= 400 & pixel_y < 420)
		begin
			if (pixel_x == 379)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 410 || pixel_y == 420 || pixel_y == 400)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 370 && pixel_x <= 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	end
	endcase
	case(D2B)
	4'b0000: begin
	if (pixel_y >= 430 && pixel_y <= 450)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 370 || pixel_x == 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 371 || pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 430 || pixel_y == 450)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 370 && pixel_x <= 380)
				begin
				red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0001: begin
	if (pixel_y >= 430 && pixel_y <= 450)
		begin
			if (pixel_x == 379)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	end
	4'b0010: begin
	if (pixel_y == 430 || pixel_y == 440 || pixel_y == 450)
		begin
			if (pixel_x == xx26-1)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 370 && pixel_x <= 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				if (pixel_y >= 430 && pixel_y < 440)
		begin
			if (pixel_x == 379)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y >= 440 && pixel_y < 450)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 370)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 371)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	end
	4'b0011: begin
	if (pixel_y >= 430 && pixel_y <= 450)
		begin
			if (pixel_x == 379)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 430 || pixel_y == 440 || pixel_y == 450)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 370 && pixel_x <= 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0100: begin
	if (pixel_y >= 430 & pixel_y <= 440)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 370)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 371)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y >= 430 & pixel_y <= 450)
		begin
			if (pixel_x ==379)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 440)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 370 && pixel_x <= 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0101: begin
	if (pixel_y >= 430 & pixel_y <= 440)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 370)
				begin
				red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 371)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y >= 440 & pixel_y <= 450)
		begin
			if (pixel_x == 379)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 380)
				begin
				red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 430 || pixel_y == 440 || pixel_y == 450)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 370 && pixel_x <= 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0110: begin
	if (pixel_y >= 430 & pixel_y <= 450)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 370)
				begin
				red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 371)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y >= 440 & pixel_y <= 450)
		begin
			if (pixel_x == 379)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 430 || pixel_y == 440 || pixel_y == 450)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 370 && pixel_x <= 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0111: begin
	if (pixel_y >= 430 & pixel_y <= 450)
		begin
			if (pixel_x == 379)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 430)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 370 && pixel_x <= 380)
				begin
			red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b1000: begin
	if (pixel_y >= 430 & pixel_y < 450)
		begin
			if (pixel_x == 379 || pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 370 || pixel_x == 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 371 || pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 430 || pixel_y == 440 || pixel_y == 450)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 370 && pixel_x <= 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b1001: begin
	if (pixel_y >= 430 & pixel_y <= 440)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 370)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 371)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y >= 430 & pixel_y < 450)
		begin
			if (pixel_x == 379)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 440 || pixel_y == 450 || pixel_y == 430)
		begin
			if (pixel_x == 369)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 370 && pixel_x <= 380)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 381)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	end
	endcase
	case(D1B)
	2'b00: begin
	if (pixel_y >= 430 && pixel_y <= 450)
		begin
			if (pixel_x == 349)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 350 || pixel_x == 360)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 351 || pixel_x == 361)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 430 || pixel_y == 450)
		begin
			if (pixel_x == 349)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 350 && pixel_x <= 360)
				begin
		red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 361)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	2'b01: begin
	if (pixel_y >= 430 && pixel_y <= 450)
		begin
			if (pixel_x == 359)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 360)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 361)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	end
	endcase
	case(D1G)
	2'b00: begin
	if (pixel_y >= 400 && pixel_y <= 420)
		begin
			if (pixel_x == 349)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 350 || pixel_x == 360)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 351 || pixel_x == 361)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 400 || pixel_y == 420)
		begin
			if (pixel_x == 349)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 350 && pixel_x <= 360)
				begin
				red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 361)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	2'b01: begin
	if (pixel_y >= 400 && pixel_y <= 420)
		begin
			if (pixel_x == 359)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 360)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 361)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	end
	endcase
	case(DWG)
	4'b0000: begin
	if (pixel_y >= 400 && pixel_y <= 420)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 470 || pixel_x == 490)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 471 || pixel_x == 491)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 400 || pixel_y == 420)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 470 && pixel_x <= 490)
				begin
				red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 491)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0001: begin
	if (pixel_y >= 400 && pixel_y <= 420)
		begin
			if (pixel_x == 479)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	end
	4'b0010: begin
	if (pixel_y == 400 || pixel_y == 410 || pixel_y == 420)
		begin
			if (pixel_x == xx26-1)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 470 && pixel_x <= 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				if (pixel_y >= 400 && pixel_y < 410)
		begin
			if (pixel_x == 479)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y >= 410 && pixel_y < 420)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 470)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 471)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	end
	4'b0011: begin
	if (pixel_y >= 400 && pixel_y <= 420)
		begin
			if (pixel_x == 479)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 400 || pixel_y == 410 || pixel_y == 420)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 470 && pixel_x <= 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0100: begin
	if (pixel_y >= 400 & pixel_y <= 410)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 470)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 471)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y >= 400 & pixel_y <= 420)
		begin
			if (pixel_x ==379)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 410)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 470 && pixel_x <= 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0101: begin
	if (pixel_y >= 400 & pixel_y <= 410)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 470)
				begin
				red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 471)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y >= 410 & pixel_y <= 420)
		begin
			if (pixel_x == 479)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 400 || pixel_y == 410 || pixel_y == 420)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 470 && pixel_x <= 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0110: begin
	if (pixel_y >= 400 & pixel_y <= 420)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 470)
				begin
				red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 471)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y >= 410 & pixel_y <= 420)
		begin
			if (pixel_x == 479)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 400 || pixel_y == 410 || pixel_y == 420)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 470 && pixel_x <= 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0111: begin
	if (pixel_y >= 400 & pixel_y <= 420)
		begin
			if (pixel_x == 479)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 400)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 470 && pixel_x <= 480)
				begin
				red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b1000: begin
	if (pixel_y >= 400 & pixel_y < 420)
		begin
			if (pixel_x == 479 || pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 470 || pixel_x == 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 471 || pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 400 || pixel_y == 410 || pixel_y == 420)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 470 && pixel_x <= 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b1001: begin
	if (pixel_y >= 400 & pixel_y <= 410)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 470)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 471)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y >= 400 & pixel_y < 420)
		begin
			if (pixel_x == 479)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 410 || pixel_y == 420 || pixel_y == 400)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 470 && pixel_x <= 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	end
	endcase
	case(DWB)
	4'b0000: begin
	if (pixel_y >= 430 && pixel_y <= 450)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 470 || pixel_x == 490)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 471 || pixel_x == 491)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 430 || pixel_y == 450)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 470 && pixel_x <= 490)
				begin
				red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 491)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0001: begin
	if (pixel_y >= 430 && pixel_y <= 450)
		begin
			if (pixel_x == 479)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	end
	4'b0010: begin
	if (pixel_y == 430 || pixel_y == 440 || pixel_y == 450)
		begin
			if (pixel_x == xx26-1)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 470 && pixel_x <= 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				if (pixel_y >= 430 && pixel_y < 440)
		begin
			if (pixel_x == 479)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y >= 440 && pixel_y < 450)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 470)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 471)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	end
	4'b0011: begin
	if (pixel_y >= 430 && pixel_y <= 450)
		begin
			if (pixel_x == 479)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 430 || pixel_y == 440 || pixel_y == 450)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 470 && pixel_x <= 480)
				begin
				red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0100: begin
	if (pixel_y >= 430 & pixel_y <= 440)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 470)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 471)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y >= 430 & pixel_y <= 450)
		begin
			if (pixel_x ==379)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 480)
				begin
				red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 440)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 470 && pixel_x <= 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0101: begin
	if (pixel_y >= 430 & pixel_y <= 440)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 470)
				begin
				red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 471)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y >= 440 & pixel_y <= 450)
		begin
			if (pixel_x == 479)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 430 || pixel_y == 440 || pixel_y == 450)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 470 && pixel_x <= 480)
				begin
				red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0110: begin
	if (pixel_y >= 430 & pixel_y <= 450)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 470)
				begin
				red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 471)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y >= 440 & pixel_y <= 450)
		begin
			if (pixel_x == 479)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 430 || pixel_y == 440 || pixel_y == 450)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 470 && pixel_x <= 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0111: begin
	if (pixel_y >= 430 & pixel_y <= 450)
		begin
			if (pixel_x == 479)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 430)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 470 && pixel_x <= 480)
				begin
				red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b1000: begin
	if (pixel_y >= 430 & pixel_y < 450)
		begin
			if (pixel_x == 479 || pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 470 || pixel_x == 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 471 || pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 430 || pixel_y == 450 || pixel_y == 440)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 470 && pixel_x <= 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b1001: begin
	if (pixel_y >= 430 & pixel_y <= 440)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 470)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 471)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y >= 430 & pixel_y < 450)
		begin
			if (pixel_x == 479)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 440 || pixel_y == 450 || pixel_y == 430)
		begin
			if (pixel_x == 469)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 470 && pixel_x <= 480)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 481)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	end
	endcase
	case (harfLPG)
	4'b0000 : begin  //A
	if (pixel_y >= 400 & pixel_y < 420)
		begin
			if (pixel_x == 614 || pixel_x == 624)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 615 || pixel_x == 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 616 || pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 400 || pixel_y == 410)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 615 && pixel_x <= 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	4'b0001 : begin  //B
	if (pixel_y >= 401 & pixel_y < 419)
		begin
			if (pixel_x == 614 || pixel_x == 624)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 615 || pixel_x == 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 616 || pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 400 || pixel_y == 410 || pixel_y == 420)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 615 && pixel_x <= 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	4'b0010 : begin  //C
	if (pixel_y >= 400 & pixel_y < 420)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 615)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 616)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 400 || pixel_y == 420)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 615 && pixel_x <= 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	4'b0011 : begin  //D
	if (pixel_y >= 400 & pixel_y < 420)
		begin
			if (pixel_x == 614 || pixel_x == 624)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 615 || pixel_x == 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 616 || pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 400 || pixel_y == 420)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 615 && pixel_x <= 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	4'b0100 : begin  //E
	if (pixel_y >= 400 & pixel_y < 420)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 615)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 616)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 400 || pixel_y == 410 || pixel_y == 420)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 615 && pixel_x <= 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	4'b0101 : begin  //F
	if (pixel_y >= 400 & pixel_y < 420)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 615)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 616)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 400 || pixel_y == 410)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 615 && pixel_x <= 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	4'b0110 : begin  //G
	if (pixel_y >= 400 & pixel_y < 420)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 615)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 616)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y >= 410 & pixel_y < 420)
		begin
			if (pixel_x == 624)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 400 || pixel_y == 420)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 615 && pixel_x <= 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	if (pixel_y == 410)
		begin
			if (pixel_x == 619)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 620 && pixel_x <= 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	4'b0111 : begin  //H
	if (pixel_y >= 400 & pixel_y < 420)
		begin
			if (pixel_x == 614 || pixel_x == 624)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 615 || pixel_x == 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 616 || pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 410)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 615 && pixel_x <= 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	4'b1000 : begin  //I
	if (pixel_y >= 400 & pixel_y < 420)
		begin
			if (pixel_x == 619)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 620)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 621)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 400 || pixel_y == 420)
		begin
			if (pixel_x == 617)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 618 && pixel_x <= 622)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 623)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	4'b1001 : begin  //J
	if (pixel_y >= 400 & pixel_y < 420)
		begin
			if (pixel_x == 619)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 620)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 621)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 400)
		begin
			if (pixel_x == 617)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 618 && pixel_x <= 622)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 623)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	if (pixel_y == 420)
		begin
			if (pixel_x == 615)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 616 && pixel_x <= 620)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 621)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	endcase
	case (harfLPB)
	4'b0000 : begin  //A
	if (pixel_y >= 430 & pixel_y < 450)
		begin
			if (pixel_x == 614 || pixel_x == 624)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 615 || pixel_x == 625)
				begin
				red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 616 || pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 430 || pixel_y == 440)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 615 && pixel_x <= 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	4'b0001 : begin  //B
	if (pixel_y >= 431 & pixel_y < 449)
		begin
			if (pixel_x == 614 || pixel_x == 624)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 615 || pixel_x == 625)
				begin
				red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 616 || pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 430 || pixel_y == 440 || pixel_y == 450)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 615 && pixel_x <= 625)
				begin
				red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	4'b0010 : begin  //C
	if (pixel_y >= 430 & pixel_y < 450)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 615)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 616)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 430 || pixel_y == 450)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 615 && pixel_x <= 625)
				begin
				red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	4'b0011 : begin  //D
	if (pixel_y >= 430 & pixel_y < 450)
		begin
			if (pixel_x == 614 || pixel_x == 624)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 615 || pixel_x == 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 616 || pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 430 || pixel_y == 450)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 615 && pixel_x <= 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	4'b0100 : begin  //E
	if (pixel_y >= 430 & pixel_y < 450)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 615)
				begin
				red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 616)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 430 || pixel_y == 440 || pixel_y == 450)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 615 && pixel_x <= 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	4'b0101 : begin  //F
	if (pixel_y >= 430 & pixel_y < 450)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 615)
				begin
				red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 616)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 430 || pixel_y == 440)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 615 && pixel_x <= 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	4'b0110 : begin  //G
	if (pixel_y >= 430 & pixel_y < 450)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 615)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 616)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y >= 440 & pixel_y < 450)
		begin
			if (pixel_x == 624)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 430 || pixel_y == 450)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 615 && pixel_x <= 625)
				begin
						red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	if (pixel_y == 440)
		begin
			if (pixel_x == 619)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 620 && pixel_x <= 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	4'b0111 : begin  //H
	if (pixel_y >= 430 & pixel_y < 450)
		begin
			if (pixel_x == 614 || pixel_x == 624)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 615 || pixel_x == 625)
				begin
						red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 616 || pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 440)
		begin
			if (pixel_x == 614)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 615 && pixel_x <= 625)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 626)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	4'b1000 : begin  //I
	if (pixel_y >= 430 & pixel_y < 450)
		begin
			if (pixel_x == 619)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 620)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 621)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 430 || pixel_y == 450)
		begin
			if (pixel_x == 617)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 618 && pixel_x <= 622)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 623)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	4'b1001 : begin  //J
	if (pixel_y >= 430 & pixel_y < 450)
		begin
			if (pixel_x == 619)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 620)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 621)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 430)
		begin
			if (pixel_x == 617)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 618 && pixel_x <= 622)
				begin
				red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 623)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	if (pixel_y == 450)
		begin
			if (pixel_x == 615)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 616 && pixel_x <= 620)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 621)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				end
	endcase
	case(sayiLPG)
	4'b0000: begin
	if (pixel_y >= 400 && pixel_y <= 420)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 630 || pixel_x == 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 631 || pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 400 || pixel_y == 420)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 630 && pixel_x <= 640)
				begin
				red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0001: begin
	if (pixel_y >= 400 && pixel_y <= 420)
		begin
			if (pixel_x == 639)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	end
	4'b0010: begin
	if (pixel_y == 400 || pixel_y == 410 || pixel_y == 420)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 630 && pixel_x <= 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				if (pixel_y >= 400 && pixel_y < 410)
		begin
			if (pixel_x == 639)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y >= 410 && pixel_y < 420)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 630)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 631)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	end
	4'b0011: begin
	if (pixel_y >= 400 && pixel_y <= 420)
		begin
			if (pixel_x == 639)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 400 || pixel_y == 410 || pixel_y == 420)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 630 && pixel_x <= 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0100: begin
	if (pixel_y >= 400 & pixel_y <= 410)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 630)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 631)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y >= 400 & pixel_y <= 420)
		begin
			if (pixel_x ==639)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 410)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 630 && pixel_x <= 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0101: begin
	if (pixel_y >= 400 & pixel_y <= 410)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 630)
				begin
				red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 631)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y >= 410 & pixel_y <= 420)
		begin
			if (pixel_x == 639)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 400 || pixel_y == 410 || pixel_y == 420)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 630 && pixel_x <= 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0110: begin
	if (pixel_y >= 400 & pixel_y <= 420)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 630)
				begin
				red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 631)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y >= 410 & pixel_y <= 420)
		begin
			if (pixel_x == 639)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 400 || pixel_y == 410 || pixel_y == 420)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 630 && pixel_x <= 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0111: begin
	if (pixel_y >= 400 & pixel_y <= 420)
		begin
			if (pixel_x == 639)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 400)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 630 && pixel_x <= 640)
				begin
				red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b1000: begin
	if (pixel_y >= 400 & pixel_y < 420)
		begin
			if (pixel_x == 629 || pixel_x == 639)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 630 || pixel_x == 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 631 || pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 400 || pixel_y == 410 || pixel_y == 420)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 630 && pixel_x <= 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b1001: begin
	if (pixel_y >= 400 & pixel_y <= 410)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 630)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 631)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y >= 400 & pixel_y < 420)
		begin
			if (pixel_x == 639)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if (pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 410 || pixel_y == 420 || pixel_y == 400)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 630 && pixel_x <= 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 0;
					green_code 	<= 255;
				end
			else if ( pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	end
	endcase
	case(sayiLPB)
	4'b0000: begin
	if (pixel_y >= 430 && pixel_y <= 450)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 630 || pixel_x == 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 631 || pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 430 || pixel_y == 450)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 630 && pixel_x <= 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0001: begin
	if (pixel_y >= 430 && pixel_y <= 450)
		begin
			if (pixel_x == 639)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	end
	4'b0010: begin
	if (pixel_y == 430 || pixel_y == 440 || pixel_y == 450)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 630 && pixel_x <= 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
				if (pixel_y >= 430 && pixel_y < 440)
		begin
			if (pixel_x == 639)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y >= 440 && pixel_y < 450)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 630)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 631)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	end
	4'b0011: begin
	if (pixel_y >= 430 && pixel_y <= 450)
		begin
			if (pixel_x == 639)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 430 || pixel_y == 440 || pixel_y == 450)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 630 && pixel_x <= 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0100: begin
	if (pixel_y >= 430 & pixel_y <= 440)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 630)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 631)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y >= 430 & pixel_y <= 450)
		begin
			if (pixel_x ==639)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 440)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 630 && pixel_x <= 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0101: begin
	if (pixel_y >= 430 & pixel_y <= 440)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 630)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 631)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y >= 440 & pixel_y <= 450)
		begin
			if (pixel_x == 639)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 430 || pixel_y == 440 || pixel_y == 450)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 630 && pixel_x <= 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0110: begin
	if (pixel_y >= 430 & pixel_y <= 450)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 630)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 631)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y >= 440 & pixel_y <= 450)
		begin
			if (pixel_x == 639)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 430 || pixel_y == 440 || pixel_y == 450)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 630 && pixel_x <= 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b0111: begin
	if (pixel_y >= 430 & pixel_y <= 450)
		begin
			if (pixel_x == 639)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 430)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 630 && pixel_x <= 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b1000: begin
	if (pixel_y >= 430 & pixel_y < 450)
		begin
			if (pixel_x == 629 || pixel_x == 639)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 630 || pixel_x == 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 631 || pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	if (pixel_y == 430 || pixel_y == 440 || pixel_y == 450)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 630 && pixel_x <= 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
				end
	end
	4'b1001: begin
	if (pixel_y >= 430 & pixel_y <= 440)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 630)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 631)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y >= 430 & pixel_y < 450)
		begin
			if (pixel_x == 639)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x == 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if (pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
		end
	if (pixel_y == 440 || pixel_y == 450 || pixel_y == 430)
		begin
			if (pixel_x == 629)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
			else if (pixel_x >= 630 && pixel_x <= 640)
				begin
					red_code 	<= 0;
					blue_code 	<= 255;
					green_code 	<= 0;
				end
			else if ( pixel_x == 641)
				begin
					red_code 	<= 255;
					blue_code 	<= 255;
					green_code 	<= 255;
				end
	end
	end
	endcase
	end
	assign red_out 	= (pixel_x > 144 && pixel_x <= 783 && pixel_y > 35 && pixel_y <= 514) ? red_code : 0;
	assign blue_out 	= (pixel_x > 144 && pixel_x <= 783 && pixel_y > 35 && pixel_y <= 514) ? blue_code : 0;
	assign green_out = (pixel_x > 144 && pixel_x <= 783 && pixel_y > 35 && pixel_y <= 514) ? green_code : 0;
endmodule
